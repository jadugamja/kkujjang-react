{"version":3,"file":"static/js/436.a8c23592.chunk.js","mappings":"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","sources":["components/Web/Member/SignupForm.jsx","pages/Web/Member/Signup.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport styled from \"styled-components\";\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\n\r\n// ===== hooks import =====\r\nimport useAxios from \"@/hooks/useAxios\";\r\n\r\n// ====== components import =====\r\nimport FormTitle from \"@/components/Web/Shared/Form/FormTitle\";\r\nimport InputField from \"@/components/Web/Shared/Form/InputField\";\r\nimport PhoneNumberAuth from \"@/components/Web/Shared/Form/PhoneNumberAuth\";\r\nimport Button from \"@/components/Web/Shared/Buttons/Button\";\r\nimport ValidationMessage from \"@/components/Web/Shared/Form/ValidationMessage\";\r\nimport WebModal from \"@/components/Web/Shared/Modal/WebModal\";\r\n\r\n// ===== style ======\r\nconst SignupFormContainer = styled(FlexBox)`\r\n  width: 100%;\r\n  height: ${(props) => props.height || \"fit-content\"};\r\n`;\r\n\r\nconst SignupInputFieldWrapper = styled(FlexBox)`\r\n  flex-grow: ${(props) => props.flexGrow};\r\n  height: ${(props) => props.height || \"fit-content\"};\r\n  margin-top: ${(props) => props.marginTop || null};\r\n  margin-bottom: ${(props) => props.marginBottom || null};\r\n  margin-left: ${(props) => props.marginLeft || null};\r\n  margin-right: ${(props) => props.marginRight || null};\r\n`;\r\n\r\nexport const DuplicationButton = styled.button`\r\n  width: ${(props) => props.width || \"8.3rem\"};\r\n  height: ${(props) => props.width || \"3.8rem\"};\r\n  font-size: ${({ theme }) => theme.fontSize.xxs};\r\n  font-weight: 700;\r\n  background-color: transparent;\r\n  color: #393939;\r\n  border: 2px solid ${({ theme }) => theme.colors.gray500};\r\n`;\r\n\r\n// ===== component ======\r\nconst SignupForm = () => {\r\n  // === ref ===\r\n  const idRef = useRef(\"\"); // 아이디\r\n  const passwordRef = useRef(\"\"); // 비밀번호\r\n  const confirmPasswordRef = useRef(\"\"); // 비밀번호 확인\r\n\r\n  // === state ===\r\n  // (에러 메시지 관련)\r\n  const [idError, setIdError] = useState(\"\"); // 아이디 유효성 검사 에러 메시지 state\r\n  const [pwError, setPwError] = useState(\"\"); // 비밀번호 유효성 검사 에러 메시지 state\r\n  const [confirmPwError, setConfirmPwError] = useState(\"\"); // 비밀번호 일치 검사 에러 메시지 state\r\n  const [duplicationError, setDuplicationError] = useState(\"\"); // 아이디 중복 확인 에러 메시지 state\r\n  // (modal 관련)\r\n  const [authModalOpen, setAuthModalOpen] = useState(false); // 인증번호 불일치 알림 modal state\r\n  const [signupModalOpen, setSignupModalOpen] = useState(false); // 회원 가입 실패 알림 modal state\r\n  const [duplicationModalOpen, setDuplicationModalOpen] = useState(false); // 중복 확인 성공 modal state\r\n  // (인증번호 관련)\r\n  const [isAuthMath, setIsAuthMath] = useState(false); // 검증 성공 여부 state\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\"); // 전화번호\r\n  // (입력 필드 관련)\r\n  const [inputDisabled, setInputDisabled] = useState(false); // 입력 필드 활성/비활성 상태\r\n  // (api 관련)\r\n  const [apiConfig, setApiConfig] = useState(null);\r\n  const { response, error, loading, fetchData } = useAxios(apiConfig, false);\r\n\r\n  // === navigate ===\r\n  const navigate = useNavigate();\r\n\r\n  // === cookie ===\r\n  const [cookies] = useCookies([\"smsAuthId\"]);\r\n\r\n  useEffect(() => {\r\n    if (apiConfig !== null) {\r\n      fetchData();\r\n    }\r\n  }, [apiConfig]);\r\n\r\n  useEffect(() => {\r\n    if (apiConfig?.url.startsWith(\"/user/username/availability?username=\")) {\r\n      if (response?.result === true) {\r\n        // response?.result === true\r\n        // 중복 확인 성공\r\n        setDuplicationError(\"\");\r\n        setDuplicationModalOpen(true);\r\n        setInputDisabled(true);\r\n      } else {\r\n        // 중복 확인 실패\r\n        setDuplicationError(\"사용할 수 없는 아이디입니다.\");\r\n        setIdError(\"\");\r\n      }\r\n    } else if (apiConfig?.url.startsWith(\"/user\")) {\r\n      if (response?.result === \"success\") {\r\n        // response?.result === 'success'\r\n        // 회원가입 성공\r\n        navigate(`/member/login`);\r\n      } else {\r\n        // 회원가입 실패\r\n        setSignupModalOpen(true);\r\n      }\r\n    }\r\n  }, [response, error]);\r\n\r\n  // 아이디 중복 확인\r\n  const handleDuplicateId = () => {\r\n    const id = idRef.current.value;\r\n    const idRegex = /^[a-z0-9]{7,30}$/;\r\n\r\n    // 아이디 유효성 검사 진행\r\n    if (!idRegex.test(id)) {\r\n      console.log(\"Fail\");\r\n    } else {\r\n      // 아이디 중복확인 API 코드\r\n      setApiConfig({\r\n        method: \"get\",\r\n        url: `/user/username/availability?username=${id}`\r\n      });\r\n    }\r\n  };\r\n\r\n  // 인증번호 검증\r\n  const handlePhoneNumberAuth = (response, phoneNumber) => {\r\n    if (response !== null) {\r\n      setIsAuthMath(true);\r\n      setPhoneNumber(phoneNumber);\r\n    } else {\r\n      // 경고 모달 출력\r\n      setAuthModalOpen(true);\r\n    }\r\n  };\r\n\r\n  // 아이디 유효성 검사\r\n  const handleIdValidation = () => {\r\n    const id = idRef.current.value;\r\n    const idRegex = /^[a-z0-9]{7,30}$/;\r\n\r\n    if (!idRegex.test(id)) {\r\n      setIdError(\"아이디 형식이 올바르지 않습니다\");\r\n      setDuplicationError(\"\");\r\n    } else {\r\n      setIdError(\"\");\r\n    }\r\n  };\r\n\r\n  // 비밀번호 유효성 검사\r\n  const handlePasswordValidation = () => {\r\n    const password = passwordRef.current.value;\r\n    const pwRegex = /^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z\\d!@#$%^&*()_+{}|:\"<>?]{7,30}$/;\r\n\r\n    if (!pwRegex.test(password)) {\r\n      setPwError(\"비밀번호 형식이 올바르지 않습니다\");\r\n    } else {\r\n      setPwError(\"\");\r\n    }\r\n  };\r\n\r\n  // 비밀번호 일치 검사\r\n  const handleConfirmPassword = () => {\r\n    const password = passwordRef.current.value;\r\n    const confirmPassword = confirmPasswordRef.current.value;\r\n\r\n    if (password !== confirmPassword || confirmPassword.trim() === \"\") {\r\n      setConfirmPwError(\"비밀번호가 일치하지 않습니다\");\r\n    } else {\r\n      setConfirmPwError(\"\");\r\n    }\r\n  };\r\n\r\n  // 회원가입\r\n  const handleSignup = () => {\r\n    if (!idError && !pwError && !confirmPwError && !duplicationError && isAuthMath) {\r\n      const id = idRef.current.value;\r\n      const password = passwordRef.current.value;\r\n      // 회원가입 API 코드\r\n      setApiConfig({\r\n        method: \"post\",\r\n        url: \"/user\",\r\n        headers: { smsAuthId: cookies.smsAuthId },\r\n        data: {\r\n          username: id,\r\n          password: password,\r\n          phone: phoneNumber\r\n        }\r\n      });\r\n    } else {\r\n      setSignupModalOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleModalOpen = () => {\r\n    if (authModalOpen == true) {\r\n      setAuthModalOpen(false);\r\n    } else if (signupModalOpen == true) {\r\n      setSignupModalOpen(false);\r\n    } else if (duplicationModalOpen == true) {\r\n      setDuplicationModalOpen(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* 인증 실패 Modal */}\r\n      {authModalOpen && (\r\n        <WebModal onClick={handleModalOpen} setIsOpen={setAuthModalOpen} hasButton={true}>\r\n          인증번호가 일치하지 않습니다.\r\n        </WebModal>\r\n      )}\r\n\r\n      {/* 회원가입 실패 Modal */}\r\n      {signupModalOpen && (\r\n        <WebModal\r\n          onClick={handleModalOpen}\r\n          setIsOpen={setSignupModalOpen}\r\n          hasButton={true}\r\n        >\r\n          회원 정보를 확인해 주세요.\r\n        </WebModal>\r\n      )}\r\n\r\n      {/* 중복 확인 Modal */}\r\n      {duplicationModalOpen && (\r\n        <WebModal\r\n          onClick={handleModalOpen}\r\n          setIsOpen={setDuplicationModalOpen}\r\n          hasButton={true}\r\n        >\r\n          사용 가능한 아이디입니다.\r\n        </WebModal>\r\n      )}\r\n\r\n      <SignupFormContainer dir=\"col\">\r\n        <FormTitle type=\"signup\" />\r\n\r\n        {/* {아이디 input field} */}\r\n        <SignupInputFieldWrapper dir=\"col\" marginBottom=\"24px\">\r\n          <SignupInputFieldWrapper row=\"between\" col=\"end\">\r\n            <SignupInputFieldWrapper flexGrow=\"0.75\" dir=\"col\">\r\n              <InputField\r\n                hasLabel={true}\r\n                name=\"id\"\r\n                inputRef={idRef}\r\n                isDataForm={true}\r\n                onBlur={handleIdValidation}\r\n                disabled={inputDisabled}\r\n              />\r\n            </SignupInputFieldWrapper>\r\n            <DuplicationButton onClick={handleDuplicateId}>중복 확인</DuplicationButton>\r\n          </SignupInputFieldWrapper>\r\n          {duplicationError && <ValidationMessage message={duplicationError} />}\r\n          {idError && <ValidationMessage message={idError} />}\r\n        </SignupInputFieldWrapper>\r\n\r\n        {/* {비밀번호 input field} */}\r\n        <SignupInputFieldWrapper dir=\"col\" marginBottom=\"24px\">\r\n          <InputField\r\n            hasLabel={true}\r\n            name=\"password\"\r\n            inputRef={passwordRef}\r\n            isDataForm={true}\r\n            onBlur={handlePasswordValidation}\r\n          />\r\n          {pwError && <ValidationMessage message={pwError} />}\r\n        </SignupInputFieldWrapper>\r\n\r\n        {/* 비밀번호 확인 input field */}\r\n        <SignupInputFieldWrapper dir=\"col\" marginBottom=\"24px\">\r\n          <InputField\r\n            hasLabel={true}\r\n            name=\"confirmPassword\"\r\n            inputRef={confirmPasswordRef}\r\n            onBlur={handleConfirmPassword}\r\n          />\r\n          {confirmPwError && <ValidationMessage message={confirmPwError} />}\r\n        </SignupInputFieldWrapper>\r\n\r\n        {/* 전화번호 인증 */}\r\n        <PhoneNumberAuth onVerificationResult={handlePhoneNumberAuth} />\r\n\r\n        {/* 회원가입 button */}\r\n        <SignupInputFieldWrapper marginTop=\"21px\">\r\n          <Button type=\"bigBrown\" message=\"회원가입\" onClick={handleSignup} />\r\n        </SignupInputFieldWrapper>\r\n      </SignupFormContainer>\r\n    </>\r\n  );\r\n};\r\n\r\n// SignupForm.propTypes = {};\r\n\r\nexport default SignupForm;\r\n","import React from \"react\";\r\n\r\n// ===== style import =====\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\n\r\n// ===== components import =====\r\nimport Header from \"@/components/Web/Shared/Layout/Header\";\r\nimport SignupForm from \"@/components/Web/Member/SignupForm\";\r\n\r\n// ===== component =====\r\nconst Signup = () => {\r\n  return (\r\n    <>\r\n      <FlexBox row=\"center\" col=\"center\">\r\n        <Header type=\"big\" />\r\n        <FlexBox width=\"35.75rem\" height=\"fit-content\">\r\n          <FlexBox as=\"main\" row=\"center\" width=\"100%\" margin=\"10.1rem 0 3.5rem\">\r\n            <SignupForm />\r\n          </FlexBox>\r\n        </FlexBox>\r\n      </FlexBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"names":["SignupFormContainer","styled","FlexBox","props","height","SignupInputFieldWrapper","flexGrow","marginTop","marginBottom","marginLeft","marginRight","DuplicationButton","button","width","theme","fontSize","xxs","colors","gray500","SignupForm","idRef","useRef","passwordRef","confirmPasswordRef","idError","setIdError","useState","pwError","setPwError","confirmPwError","setConfirmPwError","duplicationError","setDuplicationError","authModalOpen","setAuthModalOpen","signupModalOpen","setSignupModalOpen","duplicationModalOpen","setDuplicationModalOpen","isAuthMath","setIsAuthMath","phoneNumber","setPhoneNumber","inputDisabled","setInputDisabled","apiConfig","setApiConfig","response","error","loading","fetchData","useAxios","navigate","useNavigate","cookies","useCookies","useEffect","url","startsWith","result","handleModalOpen","_jsxs","_Fragment","children","_jsx","WebModal","onClick","setIsOpen","hasButton","dir","FormTitle","type","row","col","InputField","hasLabel","name","inputRef","isDataForm","onBlur","handleIdValidation","id","current","value","test","disabled","handleDuplicateId","method","console","log","ValidationMessage","message","handlePasswordValidation","password","handleConfirmPassword","confirmPassword","trim","PhoneNumberAuth","onVerificationResult","handlePhoneNumberAuth","Button","handleSignup","headers","smsAuthId","data","username","phone","Signup","Header","as","margin"],"sourceRoot":""}