{"version":3,"file":"static/js/490.4047b5cf.chunk.js","mappings":"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","sources":["components/Game/Shared/Button.jsx","assets/data/const.js","components/Game/Shared/ChatItem.jsx","components/Game/Shared/GameHeader.jsx","components/Game/Shared/Layout.jsx","components/Game/Shared/Tab.jsx","components/Game/Waiting/WaitingTab.jsx","components/Game/Playing/PlayingTab.jsx","components/Game/Waiting/WaitingPlayerList.jsx","recoil/gameState.js","components/Game/Shared/Chat.jsx","components/Game/Waiting/WaitingContainer.jsx","components/Game/Shared/TimerBar.jsx","components/Game/Playing/WordInput.jsx","components/Game/Shared/Score.jsx","components/Game/Playing/PlayingPlayerList.jsx","components/Game/Playing/PlayingContainer.jsx","pages/Game/GameRoom.jsx","styles/CommonStyle.jsx","styles/GridStyle.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { GUIDE } from \"@/assets/data/const\";\r\nimport { faCircleQuestion, faGear, faX } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Modal from \"./GameModal\";\r\n\r\nconst StyledSmallButton = styled.button`\r\n  width: 50px;\r\n  height: 42px;\r\n  background-color: ${({ type }) => getColors(type).bgColor || \"initial\"};\r\n  border-radius: 15px 15px 0 0;\r\n\r\n  &:hover {\r\n    background-color: ${({ type }) => getColors(type).hoverBgColor};\r\n  }\r\n`;\r\n\r\nconst StyledButtonIcon = styled(FontAwesomeIcon)`\r\n  color: ${({ type }) => getColors(type).color || \"initial\"};\r\n  font-size: ${({ type }) => getColors(type).fontSize || \"20px\"};\r\n`;\r\n\r\nexport const StyledMiniButton = styled.button`\r\n  padding: ${({ layout }) => (layout === \"side\" ? \"5px 9px\" : \"5px 14px\")};\r\n  background-color: transparent;\r\n  border: 1px solid #000;\r\n  border-radius: 10px;\r\n  font-size: 11px;\r\n`;\r\n\r\nconst getColors = (type) => {\r\n  switch (type) {\r\n    case \"help\":\r\n      return {\r\n        bgColor: \"#ccc\",\r\n        hoverBgColor: \"#E0E0E0\"\r\n      };\r\n    case \"setting\":\r\n      return {\r\n        bgColor: \"#bbbbb9\",\r\n        hoverBgColor: \"#ddd\"\r\n      };\r\n    case \"exit\":\r\n      return {\r\n        bgColor: \"#FF6C6C\",\r\n        hoverBgColor: \"#e55f5f\",\r\n        color: \"#fff\",\r\n        fontSize: \"19px\"\r\n      };\r\n  }\r\n};\r\n\r\nconst getIcon = (type) => {\r\n  switch (type) {\r\n    case \"help\":\r\n      return faCircleQuestion;\r\n    case \"setting\":\r\n      return faGear;\r\n    case \"exit\":\r\n      return faX;\r\n  }\r\n};\r\n\r\nexport const Button = ({ type, location }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const getMessage = (type) => {\r\n    if (type === \"help\") {\r\n      return GUIDE;\r\n    } else if (type === \"exit\") {\r\n      return location === \"playing\" ? \"게임을 그만두시겠습니까?\" : \"방을 나가시겠습니까?\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledSmallButton type={type} onClick={() => setIsModalOpen(true)}>\r\n        <StyledButtonIcon type={type} icon={getIcon(type)} />\r\n      </StyledSmallButton>\r\n      {isModalOpen ? (\r\n        <Modal type={type} isOpen={isModalOpen} setIsOpen={setIsModalOpen} height=\"14rem\">\r\n          {getMessage(type)}\r\n        </Modal>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  type: PropTypes.string,\r\n  location: PropTypes.string\r\n};\r\n\r\n// 준비 버튼\r\n// const ButtonWrapper = styled(FlexBox)`\r\n//   flex-grow: 1;\r\n//   background-color: #eee;\r\n// `;\r\n\r\n// const ReadyButton = styled.button`\r\n//   padding: 14px 26px;\r\n//   background-color: #ffd700;\r\n//   font-family: \"DNFBitBitv2\";\r\n//   font-size: 32px;\r\n//   letter-spacing: 10px;\r\n//   transition-duration: 0.4s;\r\n//   border-radius: 6px;\r\n\r\n//   &:hover {\r\n//     background-color: #8b4513;\r\n//     color: black;\r\n//   }\r\n\r\n//   &:first-letter {\r\n//     margin-left: 10px;\r\n//   }\r\n// `;\r\n","export const GUIDE = `\r\n끝말잇기\r\n\r\n끝말잇기는 이전 한국어 단어의 끝 한 자리로 시작하는 두 글자 이상의 한국어 단어를 이용하여 차례를 넘기는 방식입니다.\r\n\r\n예시) 강아지 → 지피지기 → 기회\r\n\r\n한글 맞춤법 3장 5절 두음 법칙에 따라 음절을 바꾸어 이을 수 있습니다.\r\n\r\n예시) 강강술래 → 내력 → 역학`;\r\n","import styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport FlexBox from \"@/styles/FlexStyle\";\r\n\r\nconst ChatItem = ({ nickname, message, createdAt }) => {\r\n  return (\r\n    <ChatContent>\r\n      <NickName row=\"start\" col=\"center\">\r\n        <span>{nickname}</span>\r\n      </NickName>\r\n      <Message col=\"center\">\r\n        <span>{message}</span>\r\n      </Message>\r\n      {createdAt && (\r\n        <Message marginLeft=\"auto\">\r\n          <span>{createdAt}</span>\r\n        </Message>\r\n      )}\r\n    </ChatContent>\r\n  );\r\n};\r\n\r\nconst ChatContent = styled(FlexBox)`\r\n  height: 20px;\r\n`;\r\n\r\nconst NickName = styled(FlexBox)`\r\n  width: 130px;\r\n  height: inherit;\r\n  font-weight: 700;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst Message = styled(FlexBox)`\r\n  height: inherit;\r\n  margin-left: ${({ marginLeft }) => marginLeft};\r\n`;\r\n\r\nChatItem.propTypes = {\r\n  nickname: PropTypes.string,\r\n  message: PropTypes.string,\r\n  createdAt: PropTypes.string\r\n};\r\n\r\nexport default ChatItem;\r\n","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\nimport gameLogo from \"@/assets/images/logo-game.png\";\r\nimport Modal from \"./GameModal\";\r\n\r\nconst GameHeader = ({ nickname = \"\" }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  return (\r\n    <FixedHeader>\r\n      {isModalOpen && (\r\n        <Modal\r\n          type=\"error\"\r\n          isOpen={isModalOpen}\r\n          setIsOpen={setIsModalOpen}\r\n          height=\"14rem\"\r\n        >\r\n          홈으로 이동하시겠습니까?\r\n        </Modal>\r\n      )}\r\n      <Link onClick={() => setIsModalOpen(true)}>\r\n        <LogoImg src={gameLogo} />\r\n      </Link>\r\n      <span>{nickname}</span>\r\n    </FixedHeader>\r\n  );\r\n};\r\n\r\nconst FixedHeader = styled(FlexBox).attrs({\r\n  as: \"header\",\r\n  row: \"between\",\r\n  col: \"center\"\r\n})`\r\n  position: fixed;\r\n  top: 0;\r\n  width: inherit;\r\n  height: 7rem;\r\n  background-color: transparent;\r\n  z-index: 10;\r\n`;\r\n\r\n// 로고 이미지\r\nconst LogoImg = styled.img`\r\n  width: 4rem;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nGameHeader.propTypes = {\r\n  nickname: PropTypes.string\r\n};\r\n\r\nexport default GameHeader;\r\n","import { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\n\r\nexport const SideContentWrapper = styled(FlexBox)`\r\n  width: 16.5rem;\r\n  height: 100%;\r\n`;\r\n\r\nexport const MainContentWrapper = styled(FlexBox)`\r\n  max-width: 100%;\r\n  flex-grow: 1;\r\n`;\r\n\r\nexport const Box = styled.div`\r\n  width: ${({ type }) => (type === \"home\" ? \"28rem\" : \"40.5rem\")};\r\n  height: ${({ type }) => (type === \"home\" ? \"43.6rem\" : \"49.6rem\")};\r\n  padding: 10px 22px;\r\n  background-color: #fff;\r\n  border-radius: ${({ type }) => (type === \"home\" ? \"25px\" : \"10px\")};\r\n  box-shadow: 0 0 7px 0 rgba(0, 0, 0, 0.25);\r\n  overflow-y: ${({ overflowY }) => overflowY};\r\n`;\r\n\r\nexport const Main = styled.main`\r\n  position: ${({ position }) => position};\r\n  top: ${({ top }) => top};\r\n  bottom: ${({ bottom }) => bottom};\r\n  left: ${({ left }) => left};\r\n  right: ${({ right }) => right};\r\n  max-width: ${({ maxWidth }) => maxWidth};\r\n  width: ${({ width }) => width};\r\n  height: ${({ height }) => height};\r\n  margin: ${({ margin }) => margin};\r\n  padding: ${({ padding }) => padding};\r\n  background-color: ${({ bgColor }) => bgColor};\r\n  border-top: ${({ borderTop }) => borderTop};\r\n  border-right: ${({ borderRight }) => borderRight};\r\n  border-bottom: ${({ borderBottom }) => borderBottom};\r\n  border-left: ${({ borderLeft }) => borderLeft};\r\n  border-radius: ${({ borderRadius }) => borderRadius};\r\n  z-index: ${({ zIndex }) => zIndex};\r\n`;\r\n\r\nexport const Wrapper = styled(FlexBox)`\r\n  position: ${({ position }) => position};\r\n  top: ${({ top }) => top};\r\n  bottom: ${({ bottom }) => bottom};\r\n  left: ${({ left }) => left};\r\n  right: ${({ right }) => right};\r\n  max-width: ${({ maxWidth }) => maxWidth};\r\n  width: ${({ width }) => width};\r\n  height: ${({ height }) => height};\r\n  margin: ${({ margin }) => margin};\r\n  padding: ${({ padding }) => padding};\r\n  background-color: ${({ bgColor }) => bgColor};\r\n  border-top: ${({ borderTop }) => borderTop};\r\n  border-right: ${({ borderRight }) => borderRight};\r\n  border-bottom: ${({ borderBottom }) => borderBottom};\r\n  border-left: ${({ borderLeft }) => borderLeft};\r\n  border-radius: ${({ borderRadius }) => borderRadius};\r\n  z-index: ${({ zIndex }) => zIndex};\r\n`;\r\n\r\nexport const SpacingWrapper = styled(FlexBox)`\r\n  & > * + * {\r\n    margin-top: ${({ spacingY }) => spacingY && spacingY};\r\n    margin-left: ${({ spacingX }) => spacingX && spacingX};\r\n  }\r\n`;\r\n\r\nexport const BodyWrapper = styled(FlexBox)`\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid #7d7d7d;\r\n`;\r\n\r\nexport const UpperWrapper = styled(FlexBox)`\r\n  height: 100%;\r\n  max-height: 26.65rem;\r\n  padding: 3px 5px;\r\n  background-color: ${({ type }) => (type === \"play\" ? \"#889E7D\" : \"#f3f3f3\")};\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  margin: ${({ margin }) => margin || \"0\"};\r\n  font-family: ${({ font }) => font || \"Gugi\"};\r\n  font-size: ${({ fontSize }) => fontSize || \"21px\"};\r\n  font-weight: ${({ fontWeight }) => fontWeight || \"normal\"};\r\n  color: ${({ color }) => color || \"inherit\"};\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n  width: ${({ width }) => width};\r\n`;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport { faTrophy } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\nimport Modal from \"./GameModal\";\r\nimport { roomInfoState } from \"@/recoil/roomState\";\r\nimport { userInfoState } from \"@/recoil/userState\";\r\nimport { joinRoom, loadRoom, onUserJoinRoom } from \"../../../services/socket\";\r\n\r\nconst TAB_TYPES = {\r\n  CREATE: \"create\",\r\n  ENTER: \"enter\",\r\n  LIST: \"list\",\r\n  RANKING: \"ranking\",\r\n  PLAYING: \"playing\",\r\n  READY: \"ready\",\r\n  WAIT: \"wait\"\r\n};\r\n\r\nconst TAB_BG_COLORS = {\r\n  [TAB_TYPES.CREATE]: \"#B0D3F3\",\r\n  [TAB_TYPES.ENTER]: \"#E6EEB4\",\r\n  [TAB_TYPES.LIST]: \"#779DC5\",\r\n  [TAB_TYPES.RANKING]: \"#f3f3f3\",\r\n  [TAB_TYPES.PLAYING]: \"#889E7D\",\r\n  [TAB_TYPES.WAIT]: \"#cdeba1\",\r\n  [TAB_TYPES.READY]: \"#676767\"\r\n};\r\n\r\nconst TAB_TEXT_COLORS = {\r\n  [TAB_TYPES.READY]: \"#fff\"\r\n};\r\n\r\nconst TAB_TEXTS = {\r\n  [TAB_TYPES.CREATE]: { type: \"room\", message: \"\" },\r\n  [TAB_TYPES.ENTER]: {\r\n    type: \"alert\",\r\n    message: \"입장 가능한 방이 없습니다.\",\r\n    height: \"14.5rem\"\r\n  }\r\n};\r\n\r\nconst StyledTab = styled(FlexBox)`\r\n  position: relative;\r\n  top: ${({ bgColor }) =>\r\n    bgColor === \"#779DC5\" || bgColor === \"#f3f3f3\" || bgColor === \"#889E7D\"\r\n      ? \"1px\"\r\n      : \"0\"};\r\n  z-index: 9;\r\n  width: 8.75rem;\r\n  height: 3rem;\r\n  background-color: ${({ bgColor }) => bgColor};\r\n  border: 1px solid\r\n    ${({ bgColor }) =>\r\n      bgColor === \"#779DC5\" ? \"#7D7D7D\" : bgColor === \"#f3f3f3\" ? \"#ccc\" : \"transparent\"};\r\n  color: ${({ color }) => color || \"initial\"};\r\n  border-bottom: 0;\r\n  border-radius: 12px 12px 0 0;\r\n  flex-shrink: 0;\r\n\r\n  & > * + * {\r\n    margin-left: 7px;\r\n  }\r\n\r\n  &:hover {\r\n    cursor: ${({ onClick }) => (onClick ? \"pointer\" : \"default\")};\r\n    transform: ${({ onClick }) => onClick && \"translateY(-2px)\"};\r\n  }\r\n`;\r\n\r\nconst TabIcon = styled(FontAwesomeIcon)`\r\n  font-size: ${({ fontSize }) => fontSize || \"18px\"};\r\n`;\r\n\r\nconst TabSpan = styled.span`\r\n  font-size: ${({ theme }) => theme.fontSize.s};\r\n  font-weight: 700;\r\n`;\r\n\r\n// ========= Main 탭 =========\r\nexport const MainTab = ({ children, bgColor, color, onClick }) => (\r\n  <StyledTab row=\"center\" col=\"center\" bgColor={bgColor} color={color} onClick={onClick}>\r\n    <TabSpan>{children}</TabSpan>\r\n  </StyledTab>\r\n);\r\n\r\nMainTab.propTypes = {\r\n  children: PropTypes.string,\r\n  bgColor: PropTypes.string,\r\n  color: PropTypes.string,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nexport const Tab = ({ children, type, rooms, onClick }) => {\r\n  const setRoomInfo = useSetRecoilState(roomInfoState);\r\n  const setUser = useSetRecoilState(userInfoState);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [, setCookie] = useCookies([\"userId\"]);\r\n  const navigate = useNavigate();\r\n\r\n  const onCreateRoom = useCallback(() => {\r\n    setIsModalOpen(true);\r\n  }, []);\r\n\r\n  const onTryEnterRoom = useCallback(() => {\r\n    const availableRooms = rooms?.filter(\r\n      (room) =>\r\n        room.state !== \"playing\" &&\r\n        room.isSecure === false &&\r\n        room.currentUserCount < room.maxUserCount\r\n    );\r\n\r\n    if (availableRooms.length === 0) {\r\n      setIsModalOpen(true);\r\n    } else {\r\n      const pickedRoom =\r\n        availableRooms[Math.floor(Math.random() * availableRooms.length)];\r\n\r\n      joinRoom(\r\n        { roomId: pickedRoom.id, password: \"\" },\r\n        () => {\r\n          loadRoom((room) => {\r\n            setRoomInfo(room);\r\n            setCookie(\"userId\", room.userList[room.userList.length - 1].userId, {\r\n              path: \"/\"\r\n            });\r\n            setUser((prev) => ({\r\n              userId: room.userList[room.userList.length - 1].userId,\r\n              ...prev\r\n            }));\r\n            navigate(`/game/${room.roomNumber.toString()}`);\r\n          });\r\n        },\r\n        (error) => {\r\n          // setModalType(\"error\");\r\n          // setModalMessage(error);\r\n        }\r\n      );\r\n\r\n      onUserJoinRoom((userId) => {\r\n        // 방에 참가한 사용자의 userId를 배열에 추가\r\n        debugger;\r\n        console.log(userId);\r\n      });\r\n      // setRoomId(pickedRoom.id);\r\n    }\r\n  }, [rooms]);\r\n\r\n  const getOnClick = {\r\n    [TAB_TYPES.CREATE]: onCreateRoom,\r\n    [TAB_TYPES.ENTER]: onTryEnterRoom\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledTab\r\n        as=\"button\"\r\n        row=\"center\"\r\n        col=\"center\"\r\n        type={type}\r\n        bgColor={TAB_BG_COLORS[type]}\r\n        color={TAB_TEXT_COLORS[type]}\r\n        onClick={getOnClick[type] || onClick}\r\n        hasOnClick={!!getOnClick[type] || onClick}\r\n      >\r\n        {type === \"ranking\" && <TabIcon icon={faTrophy} />}\r\n        <TabSpan>{children}</TabSpan>\r\n      </StyledTab>\r\n      {isModalOpen ? (\r\n        <Modal\r\n          type={TAB_TEXTS[type].type}\r\n          isOpen={isModalOpen}\r\n          setIsOpen={setIsModalOpen}\r\n          height={TAB_TEXTS[type]?.height}\r\n        >\r\n          {TAB_TEXTS[type].message}\r\n        </Modal>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nTab.propTypes = {\r\n  children: PropTypes.string,\r\n  type: PropTypes.oneOf(Object.values(TAB_TYPES)),\r\n  rooms: PropTypes.array,\r\n  onClick: PropTypes.func,\r\n  isModalOpen: PropTypes.bool,\r\n  setIsModalOpen: PropTypes.func\r\n};\r\n","import { useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { gameStart, switchReadyState } from \"@/services/socket\";\r\nimport { roomIdState } from \"@/recoil/roomState\";\r\nimport { waitingPlayerListState } from \"@/recoil/userState\";\r\nimport { SpacingWrapper } from \"../Shared/Layout\";\r\nimport { MainTab, Tab } from \"../Shared/Tab\";\r\nimport Modal from \"../Shared/GameModal\";\r\n\r\nconst WaitingTab = ({ isHost, roomId, setIsPlaying }) => {\r\n  const [modalType, setModalType] = useState(\"\");\r\n  const [modalMessage, setModalMessage] = useState(\"\");\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isReady, setIsReady] = useState(false);\r\n  const setRoomId = useSetRecoilState(roomIdState);\r\n  const [waitingPlayerList, setWaitingPlayerList] =\r\n    useRecoilState(waitingPlayerListState);\r\n\r\n  const onStartGame = () => {\r\n    if (waitingPlayerList.length < 2) {\r\n      setModalType(\"alert\");\r\n      setModalMessage(\"2명 이상의 플레이어가 필요합니다.\");\r\n      setIsModalOpen(true);\r\n    } else {\r\n      gameStart();\r\n    }\r\n  };\r\n\r\n  const onUpdateRoomConfig = () => {\r\n    setRoomId(roomId);\r\n    setModalType(\"room\");\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const onReadyToggle = () => {\r\n    switchReadyState(!isReady, (data) => {\r\n      const { index, state } = data;\r\n      setIsReady(state);\r\n      setWaitingPlayerList((prevList) => {\r\n        return prevList?.map((player, idx) =>\r\n          idx === index ? { ...player, isReady: state } : player\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SpacingWrapper spacingX=\"5px\">\r\n        <MainTab bgColor=\"#f3f3f3\">대기실</MainTab>\r\n        {isHost ? (\r\n          <>\r\n            <MainTab bgColor=\"#cdeba1\" onClick={onStartGame}>\r\n              시작\r\n            </MainTab>\r\n            <MainTab bgColor=\"#FFC67F\" onClick={onUpdateRoomConfig}>\r\n              방 설정\r\n            </MainTab>\r\n          </>\r\n        ) : (\r\n          <Tab type={isReady ? \"ready\" : \"wait\"} onClick={onReadyToggle}>\r\n            {isReady ? \"대기\" : \"준비\"}\r\n          </Tab>\r\n        )}\r\n      </SpacingWrapper>\r\n      {isModalOpen ? (\r\n        <Modal\r\n          type={modalType}\r\n          isOpen={isModalOpen}\r\n          setIsOpen={setIsModalOpen}\r\n          roomId={roomId}\r\n          height={modalType === \"alert\" && \"14rem\"}\r\n        >\r\n          {modalMessage}\r\n        </Modal>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nWaitingTab.propTypes = {\r\n  isHost: PropTypes.bool,\r\n  isReady: PropTypes.bool,\r\n  setIsReady: PropTypes.func,\r\n  roomId: PropTypes.string,\r\n  setIsPlaying: PropTypes.func\r\n};\r\n\r\nexport default WaitingTab;\r\n","import styled from \"styled-components\";\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\nimport { Tab } from \"@/components/Game/Shared/Tab\";\r\n\r\nconst PlayingTab = () => (\r\n  <TabWrapper>\r\n    <Tab type=\"playing\">게임중</Tab>\r\n  </TabWrapper>\r\n);\r\n\r\nconst TabWrapper = styled(FlexBox)`\r\n  & > * + * {\r\n    margin-left: 5px;\r\n  }\r\n`;\r\n\r\nexport default PlayingTab;\r\n","import { useState } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { waitingPlayerListState } from \"@/recoil/userState\";\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\nimport GridBox from \"@/styles/GridStyle\";\r\nimport Player from \"../Shared/Player\";\r\nimport avatarUrl from \"@/assets/images/avatar.png\";\r\nimport Modal from \"../Shared/GameModal\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst WaitingPlayerList = () => {\r\n  const playerList = useRecoilValue(waitingPlayerListState);\r\n  const [cookies] = useCookies([\"userId\"]);\r\n  const [userId, setUserId] = useState(null);\r\n  const [modalType, setModalType] = useState(\"profile\");\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const onPlayerClick = (userId) => {\r\n    setModalType(\"profile\");\r\n    setUserId(userId);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  return (\r\n    <GridBox items=\"4\" gap=\"10px\" margin=\"10px 4px 6px\">\r\n      {playerList?.map((player, idx) => (\r\n        <PlayerWrapper\r\n          key={player.userId}\r\n          type={player.isHost ? \"host\" : player.isReady ? \"ready\" : \"wait\"}\r\n          row=\"between\"\r\n          onClick={() => onPlayerClick(player.userId)}\r\n        >\r\n          {cookies && cookies.userId === player.userId && (\r\n            <StatusBox\r\n              position=\"absolute\"\r\n              margin=\"8px 5px\"\r\n              padding=\"4px\"\r\n              border=\"1px solid #522\"\r\n              borderRadius=\"50%\"\r\n            >\r\n              <FontAwesomeIcon\r\n                icon={faStar}\r\n                style={{ fontSize: \"12px\", color: \"#522\" }}\r\n              />\r\n            </StatusBox>\r\n          )}\r\n          <Player avatarUrl={avatarUrl} nickname={player.nickname} level={player.level} />\r\n          <StatusBox dir=\"col\" row=\"start\">\r\n            <StatusText type={player.isHost ? \"host\" : player.isReady ? \"ready\" : \"wait\"}>\r\n              {player.isHost ? \"방장\" : player.isReady ? \"준비\" : \"대기\"}\r\n            </StatusText>\r\n          </StatusBox>\r\n        </PlayerWrapper>\r\n      ))}\r\n      {isModalOpen && (\r\n        <Modal\r\n          type={modalType}\r\n          setType={setModalType}\r\n          isOpen={isModalOpen}\r\n          setIsOpen={setIsModalOpen}\r\n          userId={userId}\r\n        />\r\n      )}\r\n    </GridBox>\r\n  );\r\n};\r\n\r\nconst PlayerWrapper = styled(FlexBox)`\r\n  height: 11.5rem;\r\n  background-image: ${({ type }) => {\r\n    return type === \"host\"\r\n      ? \"linear-gradient(0deg, #fbdb94, transparent)\"\r\n      : type === \"ready\"\r\n        ? \"linear-gradient(0deg, rgb(157 171 136), rgba(239, 255, 215, 0.37))\"\r\n        : \"linear-gradient(0deg, rgb(217 217 217), transparent)\";\r\n  }};\r\n  border: 2px solid rgb(107 107 107 / 26%);\r\n  border-radius: 7px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst StatusBox = styled(FlexBox)`\r\n  position: ${({ position }) => position};\r\n  margin: ${({ margin }) => margin || \"10px 14px\"};\r\n  padding: ${({ padding }) => padding};\r\n  border: ${({ border }) => border};\r\n  border-radius: ${({ borderRadius }) => borderRadius};\r\n`;\r\n\r\nconst StatusText = styled.span`\r\n  font-size: 19px;\r\n  font-weight: 800;\r\n  color: ${({ type }) => {\r\n    return type === \"host\" ? \"#E15030\" : type === \"ready\" ? \"#708355\" : \"inherit\";\r\n  }};\r\n`;\r\n\r\nexport default WaitingPlayerList;\r\n","import { atom, selector } from \"recoil\";\r\nimport { playingPlayerListState } from \"./userState\";\r\n\r\n// 제시어\r\nexport const randomWordState = atom({\r\n  key: \"randomWordState\",\r\n  default: \"\"\r\n});\r\n\r\n// 끝말잇기 첫 글자\r\nexport const initialCharacterState = atom({\r\n  key: \"initialCharacterState\",\r\n  default: \"\"\r\n});\r\n\r\n// 현재 라운드\r\nexport const currentRoundState = atom({\r\n  key: \"currentRoundState\",\r\n  default: 0\r\n});\r\n\r\n// 차례 진행 횟수\r\nexport const turnCountState = atom({\r\n  key: \"turnCountState\",\r\n  default: 0\r\n});\r\n\r\nexport const isMyTurnState = atom({\r\n  key: \"isMyTurnState\",\r\n  default: false\r\n});\r\n\r\n// 남은 시간: 현재 차례\r\nexport const thisTurnLeftTimeState = atom({\r\n  key: \"thisTurnLeftTimeState\",\r\n  default: 0\r\n});\r\n\r\n// 남은 시간: 이번 라운드\r\nexport const thisRoundLeftTimeState = atom({\r\n  key: \"thisRoundLeftTimeState\",\r\n  default: 0\r\n});\r\n\r\n// 현재 차례 플레이어 순서\r\nexport const myTurnPlayerIndexState = selector({\r\n  key: \"myTurnPlayerIndexState\",\r\n  get: ({ get }) =>\r\n    get(playingPlayerListState).findIndex((player) => player.myTurn === true)\r\n});\r\n\r\n// 끝말잇기 실패 상태\r\nexport const isWordFailState = atom({\r\n  key: \"isWordFailState\",\r\n  default: false\r\n});\r\n\r\n// 현재 차례 끝말잇기 점수 결과\r\nexport const currentPointsState = atom({\r\n  key: \"currentPointsState\",\r\n  default: 0\r\n});\r\n\r\n// 인게임 내 말풍선 메시지\r\nexport const balloonMessageState = atom({\r\n  key: \"balloonMessageState\",\r\n  default: null\r\n});\r\n","import { useState, useRef, useEffect } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport FlexBox from \"@/styles/FlexStyle\";\r\nimport { balloonMessageState } from \"@/recoil/gameState\";\r\nimport { faComment } from \"@fortawesome/free-solid-svg-icons\";\r\nimport ChatItem from \"./ChatItem\";\r\nimport { receiveMessage, sendMessage } from \"@/services/socket\";\r\nimport { getPlayerInfoByUserId } from \"@/services/user\";\r\n\r\nconst Chat = ({ isPlaying, size = \"default\" }) => {\r\n  const [toMessage, setToMessage] = useState(\"\");\r\n  const setBalloonMessage = useSetRecoilState(balloonMessageState);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  // const messageQueue = useRef([]);\r\n  const chatResult = useRef(null);\r\n  const chatInput = useRef();\r\n  const cs = useRef(null);\r\n\r\n  useEffect(() => {\r\n    receiveMessage(async (data) => {\r\n      // 사용자가 스크롤 제어하는지 확인\r\n      const isUserScrolling =\r\n        chatResult.current.scrollHeight - chatResult.current.scrollTop !==\r\n        chatResult.current.clientHeight;\r\n\r\n      // 사용자가 스크롤을 제어하지 않는 경우\r\n      if (!isUserScrolling) {\r\n        // messages 상태 변경되는 경우, 스크롤 위치 아래로 이동\r\n        chatResult.current.scrollTop = chatResult.current.scrollHeight;\r\n      }\r\n\r\n      const { userId, message } = data;\r\n      const nickname = await getNicknameByUserId(userId);\r\n      setChats((prevChat) => [...prevChat, { nickname: nickname, message: message }]);\r\n      if (isPlaying) setBalloonMessage({ userId: userId, message: message });\r\n    });\r\n  }, []);\r\n\r\n  // 사용자가 메시지를 입력한 경우, 스크롤 맨아래 유지\r\n  useEffect(() => {\r\n    if (chatResult.current) {\r\n      chatResult.current.scrollTop = chatResult.current.scrollHeight;\r\n    }\r\n  }, [chats]);\r\n\r\n  // const processMessages = async () => {\r\n  //   while (messageQueue.current.length > 0) {\r\n  //     // 사용자가 스크롤 제어하는지 확인\r\n  //     const isUserScrolling =\r\n  //       chatResult.current.scrollHeight - chatResult.current.scrollTop !==\r\n  //       chatResult.current.clientHeight;\r\n\r\n  //     // 사용자가 스크롤을 제어하지 않는 경우\r\n  //     if (!isUserScrolling) {\r\n  //       // messages 상태 변경되는 경우, 스크롤 위치 아래로 이동\r\n  //       chatResult.current.scrollTop = chatResult.current.scrollHeight;\r\n  //     }\r\n\r\n  //     const data = messageQueue.current.shift();\r\n  //     const { userId, message } = data;\r\n  //     const nickname = await getNicknameByUserId(userId);\r\n  //     setChats((prevChat) => [...prevChat, { nickname: nickname, message: message }]);\r\n  //   }\r\n  // };\r\n\r\n  const sendChatMessage = () => {\r\n    sendMessage(toMessage);\r\n    setToMessage(\"\");\r\n    chatInput.current.focus();\r\n  };\r\n\r\n  const handleMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (toMessage) sendChatMessage(toMessage);\r\n  };\r\n\r\n  const getNicknameByUserId = async (userId) => {\r\n    const userInfo = await getPlayerInfoByUserId(userId);\r\n    return userInfo.nickname;\r\n  };\r\n\r\n  return (\r\n    <ChatWrapper dir=\"col\" size={size}>\r\n      <ChatHeader size={size}>\r\n        <ChatIcon icon={faComment} />\r\n        채팅\r\n      </ChatHeader>\r\n      <ChatItemWrapper dir=\"col\" ref={chatResult}>\r\n        {chats?.map((chat, i) => (\r\n          <ChatItem key={i} nickname={chat.nickname} message={chat.message} />\r\n        ))}\r\n      </ChatItemWrapper>\r\n      <ChatInputWrapper row=\"between\">\r\n        <ChatInput\r\n          type=\"text\"\r\n          value={toMessage}\r\n          onChange={(e) => setToMessage(e.target.value)}\r\n          onKeyDown={(e) => {\r\n            if (e.key === \"Enter\") handleMessage(e);\r\n          }}\r\n          ref={chatInput}\r\n        />\r\n        <ChatSubmitButton col=\"center\" row=\"center\" onClick={handleMessage}>\r\n          전송\r\n        </ChatSubmitButton>\r\n      </ChatInputWrapper>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\nChat.propTypes = {\r\n  isPlaying: PropTypes.bool,\r\n  size: PropTypes.string\r\n};\r\n\r\n// ver 1. width: 46rem\r\nconst ChatWrapper = styled(FlexBox)`\r\n  width: ${({ size }) => (size === \"big\" ? \"100%\" : \"57rem\")};\r\n  height: 12.25rem;\r\n  background-color: #eee;\r\n  padding: 6px 4px;\r\n`;\r\n\r\nconst ChatHeader = styled.div`\r\n  width: ${({ size }) => (size === \"big\" ? \"calc(100% - 8px)\" : \"auto\")};\r\n  height: 20px;\r\n  margin: 0 5px;\r\n  padding-left: 10px;\r\n  border-radius: 4px;\r\n  box-shadow: 2px 2px 1px rgba(0, 0, 0, 0.25);\r\n  background-color: #dddddd;\r\n  opacity: 0.8;\r\n  color: #000000cc;\r\n  font-size: ${({ theme }) => theme.fontSize.xxxxs};\r\n  font-weight: 700;\r\n`;\r\n\r\nconst ChatIcon = styled(FontAwesomeIcon)`\r\n  margin-right: 4px;\r\n`;\r\n\r\nconst ChatItemWrapper = styled(FlexBox)`\r\n  flex-basis: 65%;\r\n  flex-grow: 1;\r\n  margin: 2px 12px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst ChatInputWrapper = styled(FlexBox)`\r\n  position: relative;\r\n  height: 36px;\r\n  border: 1px solid #888;\r\n  border-radius: 10px;\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst ChatInput = styled.input`\r\n  width: 100%;\r\n  border: 0;\r\n  border-radius: 10px 0 0 10px;\r\n  padding: 0 10px;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst ChatSubmitButton = styled(FlexBox).attrs({\r\n  as: \"button\"\r\n})`\r\n  width: 4.625rem;\r\n  font-size: 15px;\r\n  font-weight: 700;\r\n  color: #5590e0;\r\n  border-radius: 0 10px 10px 0;\r\n`;\r\n\r\nexport default Chat;\r\n","import PropTypes from \"prop-types\";\r\n\r\nimport { BodyWrapper, UpperWrapper, Wrapper } from \"../Shared/Layout\";\r\nimport TitleBar from \"../Shared/TitleBar\";\r\nimport WaitingPlayerList from \"./WaitingPlayerList\";\r\nimport Profile from \"../Shared/Profile\";\r\nimport Chat from \"../Shared/Chat\";\r\n\r\nconst WaitingContainer = ({ roomInfo }) => {\r\n  return (\r\n    <BodyWrapper dir=\"col\">\r\n      <UpperWrapper dir=\"col\" type=\"wait\">\r\n        <TitleBar type=\"room\" info={roomInfo} />\r\n        <WaitingPlayerList />\r\n      </UpperWrapper>\r\n      <Wrapper>\r\n        <Profile />\r\n        <Chat isPlaying={roomInfo?.state === \"playing\"} />\r\n      </Wrapper>\r\n    </BodyWrapper>\r\n  );\r\n};\r\n\r\nWaitingContainer.propTypes = {\r\n  roomInfo: PropTypes.object\r\n};\r\n\r\nexport default WaitingContainer;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\nimport { thisTurnLeftTimeState, thisRoundLeftTimeState } from \"@/recoil/gameState\";\r\nimport { onTimer } from \"@/services/socket\";\r\n\r\nconst TimerBar = ({ type, totalTime }) => {\r\n  const [totalTurnTime, setTotalTurnTime] = useState(totalTime / 10);\r\n  const [thisTurnLeftTime, setThisTurnLeftTime] = useRecoilState(thisTurnLeftTimeState);\r\n  const [thisRoundLeftTime, setThisRoundLeftTime] =\r\n    useRecoilState(thisRoundLeftTimeState);\r\n  const [width, setWidth] = useState(0);\r\n  const secRef = useRef(0);\r\n\r\n  useEffect(() => {\r\n    onTimer((data) => {\r\n      const { personalTimeLimit, personalTimeLeft, roundTimeLeft } = data;\r\n\r\n      if (personalTimeLeft < 0) {\r\n        setThisTurnLeftTime(0);\r\n      } else if (roundTimeLeft < 0) {\r\n        setThisRoundLeftTime(0);\r\n      }\r\n      setTotalTurnTime(personalTimeLimit);\r\n      setThisTurnLeftTime(personalTimeLeft);\r\n      setThisRoundLeftTime(roundTimeLeft);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const leftTime = type === \"turn\" ? thisTurnLeftTime : thisRoundLeftTime;\r\n    const newWidth =\r\n      leftTime > 0 ? (leftTime / (type === \"turn\" ? totalTurnTime : totalTime)) * 100 : 0;\r\n    setWidth(newWidth);\r\n    secRef.current = Math.round(leftTime / 100) / 10;\r\n  }, [totalTurnTime, thisTurnLeftTime, thisRoundLeftTime]);\r\n\r\n  const getBgColor = (type, name) => {\r\n    switch (type) {\r\n      case \"turn\":\r\n        return name === \"outer\" ? \"#70712d\" : \"#E6E846\";\r\n      case \"round\":\r\n        return name === \"outer\" ? \"#223c6c\" : \"#3573E4\";\r\n    }\r\n  };\r\n\r\n  const outerColor = React.useMemo(() => getBgColor(type, \"outer\"), [type]);\r\n  const innerColor = React.useMemo(() => getBgColor(type, \"inner\"), [type]);\r\n\r\n  return (\r\n    <ProgressBarWrapper bgColor={outerColor}>\r\n      <ProgressBar width={width} bgColor={innerColor} row=\"end\" col=\"center\">\r\n        <TimeLeftText>{`${secRef.current}초`}</TimeLeftText>\r\n      </ProgressBar>\r\n    </ProgressBarWrapper>\r\n  );\r\n};\r\n\r\nTimerBar.propTypes = {\r\n  type: PropTypes.oneOf([\"turn\", \"round\"]),\r\n  totalTime: PropTypes.number\r\n};\r\n\r\nconst ProgressBarWrapper = styled.div`\r\n  width: 100%;\r\n  height: 1.5rem;\r\n  background-color: ${({ bgColor }) => bgColor};\r\n`;\r\n\r\nconst ProgressBar = styled(FlexBox)`\r\n  width: ${({ width }) => width}%;\r\n  height: 100%;\r\n  padding: 5px;\r\n  background-color: ${({ bgColor }) => bgColor};\r\n  border: 1px solid #00000080;\r\n`;\r\n\r\nconst TimeLeftText = styled.span`\r\n  font-weight: 900;\r\n  color: #fff;\r\n  text-shadow: 1px 0px 3px #7e7e7e;\r\n`;\r\n\r\nexport default TimerBar;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\nimport { blink } from \"@/styles/CommonStyle\";\r\nimport { GameModalInput as Input } from \"../Shared/GameModalStyle\";\r\nimport TimerBar from \"../Shared/TimerBar\";\r\nimport {\r\n  playingPlayerListState,\r\n  playingPlayerState,\r\n  syncPlayingPlayerToListState\r\n} from \"@/recoil/userState\";\r\nimport {\r\n  randomWordState,\r\n  initialCharacterState,\r\n  isMyTurnState,\r\n  thisTurnLeftTimeState,\r\n  currentRoundState,\r\n  currentPointsState,\r\n  isWordFailState\r\n} from \"@/recoil/gameState\";\r\nimport { sendMessage } from \"@/services/socket\";\r\n\r\nconst WordInput = ({ roundCount, roundTime }) => {\r\n  const randomWord = useRecoilValue(randomWordState);\r\n  const initialCharacter = useRecoilValue(initialCharacterState);\r\n  const isMyTurn = useRecoilValue(isMyTurnState);\r\n  const isFail = useRecoilValue(isWordFailState);\r\n  const thisTurnLeftTime = useRecoilValue(thisTurnLeftTimeState);\r\n  const [currRound, setCurrRound] = useRecoilState(currentRoundState);\r\n  const [inputWord, setInputWord] = useState(\"\");\r\n  const [playerList, setPlayerList] = useRecoilState(playingPlayerListState);\r\n  const [player, setPlayer] = useRecoilState(playingPlayerState);\r\n  const syncPlayerList = useSetRecoilState(syncPlayingPlayerToListState);\r\n\r\n  useEffect(() => {\r\n    syncPlayerList((prevList) => prevList?.map((p) => (player.myTurn ? player : p)));\r\n  }, [player]);\r\n\r\n  const onEnterKeyDown = async (e) => {\r\n    if (e.key !== \"Enter\") return;\r\n\r\n    setInputWord(\"\");\r\n\r\n    if (!inputWord.startsWith(randomWord?.split(\"\")[currRound]) && thisTurnLeftTime <= 0)\r\n      return;\r\n\r\n    sendMessage(inputWord);\r\n  };\r\n\r\n  return (\r\n    <WordInputWrapper dir=\"col\" col=\"center\">\r\n      <FirstWordWrapper row=\"center\" col=\"center\">\r\n        {randomWord?.split(\"\").map((char, i) => (\r\n          <FirstWordSpan key={i} type={i === currRound && \"this\"}>\r\n            {char}\r\n          </FirstWordSpan>\r\n        ))}\r\n      </FirstWordWrapper>\r\n      <WordTimerInfo dir=\"col\" row=\"center\" col=\"center\">\r\n        <DisplayWordWrapper row=\"center\" col=\"center\">\r\n          {isFail ? (\r\n            <DisplayFailWord>{initialCharacter}</DisplayFailWord>\r\n          ) : (\r\n            <DisplayWord>{initialCharacter}</DisplayWord>\r\n          )}\r\n        </DisplayWordWrapper>\r\n        <TimerBar type=\"turn\" totalTime={roundTime} />\r\n        <TimerBar type=\"round\" totalTime={roundTime} />\r\n      </WordTimerInfo>\r\n      {isMyTurn && (\r\n        <InputWrapper>\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"당신의 차례! 아래 채팅창에서 단어를 입력하세요!\"\r\n            bgColor=\"#fff\"\r\n            fontSize=\"18px\"\r\n            value={inputWord}\r\n            onChange={(e) => setInputWord(e.target.value)}\r\n            onKeyDown={onEnterKeyDown}\r\n          />\r\n        </InputWrapper>\r\n      )}\r\n    </WordInputWrapper>\r\n  );\r\n};\r\n\r\nWordInput.propTypes = {\r\n  roundCount: PropTypes.number,\r\n  roundTime: PropTypes.number\r\n};\r\n\r\nconst WordInputWrapper = styled(FlexBox)`\r\n  height: fit-content;\r\n  min-height: 12.5rem;\r\n`;\r\n\r\nconst FirstWordWrapper = styled(FlexBox)`\r\n  margin: 10px 0 6px;\r\n\r\n  & > * + * {\r\n    margin-left: 4px;\r\n  }\r\n`;\r\n\r\nconst FirstWordSpan = styled.span`\r\n  font-size: ${({ type }) => (type === \"this\" ? \"22px\" : \"19px\")};\r\n  font-weight: 700;\r\n  color: ${({ type }) => (type === \"this\" ? \"#DFD943\" : \"#fff\")};\r\n`;\r\n\r\nconst WordTimerInfo = styled(FlexBox)`\r\n  width: 40.25rem;\r\n  background-color: #f3c264;\r\n  border: 1px solid rgba(0, 0, 0, 0.3);\r\n  border-radius: 7px;\r\n  padding: 5px;\r\n`;\r\n\r\nconst DisplayWordWrapper = styled(FlexBox)`\r\n  width: 100%;\r\n  height: 3.75rem;\r\n  background-color: #413014;\r\n  border-top-left-radius: 7px;\r\n  border-top-right-radius: 7px;\r\n`;\r\n\r\nconst DisplayWord = styled.span`\r\n  margin-left: 12px;\r\n  font-family: \"Pretendard Variable\";\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  letter-spacing: 12px;\r\n  color: #fff;\r\n`;\r\n\r\nconst DisplayFailWord = styled.span`\r\n  font-family: \"Pretendard Variable\";\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  letter-spacing: 12px;\r\n  color: ${({ theme }) => theme.colors.error};\r\n  text-decoration: line-through;\r\n  animation: ${blink} 0.5s step-end;\r\n`;\r\n\r\nconst InputWrapper = styled(FlexBox)`\r\n  position: absolute;\r\n  top: 40%;\r\n  width: 40.25rem;\r\n  padding: 4px;\r\n  background-color: #000000cc;\r\n  z-index: 9;\r\n`;\r\n\r\nexport default WordInput;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Wrapper } from \"./Layout\";\r\nimport { currentPointsState } from \"@/recoil/gameState\";\r\nimport { playingPlayerListState, playingPlayerState } from \"@/recoil/userState\";\r\n\r\nexport const TurnScore = () => {\r\n  const [pointType, setPointType] = useState(null);\r\n  const [currPoints, setCurrPoints] = useRecoilState(currentPointsState);\r\n  const [player, setPlayer] = useRecoilState(playingPlayerState);\r\n  const [playerList, setPlayerList] = useRecoilState(playingPlayerListState);\r\n\r\n  useEffect(() => {\r\n    if (currPoints !== 0) {\r\n      if (currPoints > 0) setPointType(\"score\");\r\n      else if (currPoints < 0) setPointType(\"penalty\");\r\n\r\n      const disappered = setTimeout(() => {\r\n        setCurrPoints(0);\r\n      }, 1500);\r\n\r\n      if (player.myTurn) {\r\n        const updatedPlayer = {\r\n          ...player,\r\n          score: player.score + currPoints\r\n        };\r\n        setPlayer(updatedPlayer);\r\n\r\n        const updatedPlayerList = playerList?.map((p) =>\r\n          p.id === player.id ? updatedPlayer : p\r\n        );\r\n        setPlayerList(updatedPlayerList);\r\n      }\r\n      return () => clearTimeout(disappered);\r\n    }\r\n  }, [currPoints]);\r\n\r\n  return (\r\n    <Wrapper\r\n      position=\"absolute\"\r\n      top={pointType === \"score\" && \"-12px\"}\r\n      right={pointType === \"score\" && \"-10px\"}\r\n      bottom={pointType === \"penalty\" && \"13px\"}\r\n      left={pointType === \"penalty\" && \"15px\"}\r\n      type={pointType}\r\n    >\r\n      <StyledSpan type={pointType}>\r\n        {currPoints !== 0 && (pointType === \"score\" ? `+${currPoints}` : `${currPoints}`)}\r\n      </StyledSpan>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport const TotalScore = ({ children }) => {\r\n  return (\r\n    <Wrapper row=\"center\" col=\"center\" maxWidth=\"100%\" height=\"34px\" margin=\"5px 0 0\">\r\n      <StyledScoreText>{children}</StyledScoreText>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nTotalScore.propTypes = {\r\n  children: PropTypes.string\r\n};\r\n\r\nconst StyledSpan = styled.span`\r\n  font-size: 40px;\r\n  font-weight: 700;\r\n  color: ${({ type }) => (type === \"score\" ? \"#1F4DE9\" : \"#FF6666\")};\r\n  text-shadow: ${({ type }) =>\r\n    type === \"score\"\r\n      ? \"-1px 0 #4670FC, 0 1px #4670FC, 1px 0 #4670FC, 0 -1px #4670FC\"\r\n      : \"-1px 0 #923838, 0 1px #923838, 1px 0 #923838, 0 -1px #923838\"};\r\n`;\r\n\r\nconst StyledScoreText = styled.span`\r\n  font-family: \"Pretendard Variable\";\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  letter-spacing: 0;\r\n`;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport { FlexBox } from \"@/styles/FlexStyle\";\r\nimport GridBox from \"@/styles/GridStyle\";\r\nimport Player from \"../Shared/Player\";\r\nimport avatarUrl from \"@/assets/images/avatar.png\";\r\nimport { TotalScore, TurnScore } from \"../Shared/Score\";\r\nimport { playingPlayerListState } from \"@/recoil/userState\";\r\nimport { balloonMessageState } from \"@/recoil/gameState\";\r\n\r\nconst PlayingPlayerList = ({ defeatedPlayerIndex }) => {\r\n  const playerList = useRecoilValue(playingPlayerListState);\r\n  const balloonMessage = useRecoilValue(balloonMessageState);\r\n  const [isDefeated, setIsDefeated] = useState(false);\r\n  const [isBalloonShown, setIsBalloonShown] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (defeatedPlayerIndex !== null) {\r\n      const defeatedPlayers = playerList.map(\r\n        (player, idx) => idx === defeatedPlayerIndex\r\n      );\r\n      setIsDefeated(defeatedPlayers);\r\n\r\n      const timer = setTimeout(() => {\r\n        setIsDefeated(defeatedPlayers.fill(false));\r\n      }, 1000);\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [defeatedPlayerIndex]);\r\n\r\n  useEffect(() => {\r\n    if (balloonMessage !== null) {\r\n      setIsBalloonShown(true);\r\n      const timer = setTimeout(() => {\r\n        setIsBalloonShown(false);\r\n      }, 3000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [balloonMessage]);\r\n\r\n  return (\r\n    <GridBox items=\"8\" gap=\"10px\" flow=\"col\" row=\"between\" col=\"center\" margin=\"5px 10px\">\r\n      {playerList?.map((player, idx) => (\r\n        <PlayerWrapper\r\n          key={player.id}\r\n          dir=\"col\"\r\n          col=\"center\"\r\n          myTurn={player.myTurn}\r\n          defeated={isDefeated[idx]}\r\n        >\r\n          {isBalloonShown && balloonMessage.userId === player.id && (\r\n            <StyledBalloon>\r\n              <span>{balloonMessage.message}</span>\r\n            </StyledBalloon>\r\n          )}\r\n          <Player\r\n            type=\"play\"\r\n            avatarUrl={avatarUrl}\r\n            nickname={player.nickname}\r\n            level={player.level}\r\n          />\r\n          {player.myTurn && <TurnScore />}\r\n          <TotalScore>{String(player?.score).padStart(5, \"0\")}</TotalScore>\r\n        </PlayerWrapper>\r\n      ))}\r\n    </GridBox>\r\n  );\r\n};\r\n\r\nPlayingPlayerList.propTypes = {\r\n  defeatedPlayerIndex: PropTypes.number\r\n};\r\n\r\nconst PlayerWrapper = styled(FlexBox)`\r\n  position: relative;\r\n  width: 8.3rem;\r\n  height: 12rem;\r\n  padding: 12px 10px;\r\n  background-color: ${({ myTurn, defeated }) =>\r\n    defeated ? \"#f0f0f0\" : myTurn ? \"#DDFFDD\" : \"#f0f0f0\"};\r\n  border: ${({ myTurn, defeated }) =>\r\n    defeated ? \"3px solid #FF6C6C\" : myTurn && \"2px solid #57F857\"};\r\n  border-radius: 7px;\r\n  transform: ${({ myTurn }) => myTurn && \"translateY(-15px)\"};\r\n`;\r\n\r\nconst fadeOut = keyframes`\r\n  0% { opacity: 1; }\r\n  100% { opacity: 0; }\r\n`;\r\n\r\nconst StyledBalloon = styled.div`\r\n  position: absolute;\r\n  top: -29px;\r\n  width: 133px;\r\n  height: 34px;\r\n  background-color: #fff;\r\n  border: 1px solid #a3a3a3;\r\n  border-radius: 9px;\r\n  padding: 3px 5px;\r\n  animation: ${fadeOut} 3s linear;\r\n\r\n  &::before,\r\n  &::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    border-left: 10px solid transparent;\r\n    border-right: 10px solid transparent;\r\n  }\r\n\r\n  &::before {\r\n    top: 32px;\r\n    left: 42%;\r\n    border-top: 11px solid #a3a3a3;\r\n  }\r\n\r\n  &::after {\r\n    top: 31px;\r\n    left: 42%;\r\n    border-top: 10px solid #fff;\r\n  }\r\n`;\r\n\r\nexport default PlayingPlayerList;\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { playingPlayerListState, playingPlayerState } from \"@/recoil/userState\";\r\nimport {\r\n  randomWordState,\r\n  initialCharacterState,\r\n  turnCountState,\r\n  isMyTurnState,\r\n  currentRoundState,\r\n  isWordFailState,\r\n  currentPointsState\r\n} from \"@/recoil/gameState\";\r\nimport {\r\n  roundStart,\r\n  onRoundStart,\r\n  turnStart,\r\n  onTurnStart,\r\n  onGameEnd,\r\n  onRoundEnd,\r\n  onTurnEnd,\r\n  receiveSayWordFail,\r\n  receiveSayWordSucceed\r\n} from \"@/services/socket\";\r\nimport { BodyWrapper, UpperWrapper, Wrapper } from \"../Shared/Layout\";\r\nimport TitleBar from \"../Shared/TitleBar\";\r\nimport Chat from \"../Shared/Chat\";\r\nimport WordInput from \"./WordInput\";\r\nimport PlayingPlayerList from \"./PlayingPlayerList\";\r\nimport GameModal from \"../Shared/GameModal\";\r\nimport { getPlayerInfoByUserId } from \"@/services/user\";\r\n\r\nconst PlayingContainer = ({ roomInfo, setIsPlaying }) => {\r\n  const [player, setPlayer] = useRecoilState(playingPlayerState);\r\n  const [playerList, setPlayerList] = useRecoilState(playingPlayerListState);\r\n  const [randomWord, setRandomWord] = useRecoilState(randomWordState);\r\n  const setInitialCharacter = useSetRecoilState(initialCharacterState);\r\n  const setIsMyTurn = useSetRecoilState(isMyTurnState);\r\n  const setCurrRound = useSetRecoilState(currentRoundState);\r\n  const setTurnCount = useSetRecoilState(turnCountState);\r\n  const setIsWordFail = useSetRecoilState(isWordFailState);\r\n  const setCurrPoints = useSetRecoilState(currentPointsState);\r\n\r\n  const [isDataFetched, setIsDataFetched] = useState(false);\r\n  const [isRoundEnd, setIsRoundEnd] = useState(false);\r\n  const [defeatedPlayerIndex, setDefeatedPlayerIndex] = useState(null);\r\n  const [timeoutIds, setTimeoutIds] = useState([]);\r\n  const [modalType, setModalType] = useState(\"error\");\r\n  const [modalChildren, setModalChildren] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [cookie] = useCookies([\"userId\"]);\r\n\r\n  const isLastRoundRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    // 방장이 라운드 시작 요청\r\n    if (roomInfo?.roomOwnerUserId === cookie.userId && !isLastRoundRef.current) {\r\n      roundStart();\r\n    }\r\n\r\n    onRoundStart((gameStatus) => {\r\n      if (gameStatus.currentRound === 0) {\r\n        const updatedPlayerList = gameStatus.usersSequence.map((user, idx) => ({\r\n          id: user.userId,\r\n          score: user.score,\r\n          myTurn: idx === gameStatus.currentTurnUserIndex,\r\n          ...user\r\n        }));\r\n        setPlayerList(updatedPlayerList);\r\n        if (!randomWord) setRandomWord(gameStatus.roundWord);\r\n      }\r\n      setInitialCharacter(gameStatus.wordStartsWith);\r\n      setCurrRound(gameStatus.currentRound);\r\n      setIsMyTurn(gameStatus.currentTurnUserId === cookie.userId);\r\n      if (gameStatus.currentRound + 1 === gameStatus.maxRound) {\r\n        isLastRoundRef.current = true;\r\n      }\r\n      if (!isRoundEnd) {\r\n        setIsRoundEnd(false);\r\n      }\r\n\r\n      // 현재 차례인 플레이어가 턴 시작 요청\r\n      if (gameStatus.currentTurnUserId === cookie.userId) {\r\n        turnStart();\r\n      }\r\n    });\r\n\r\n    onTurnStart(\r\n      (gameStatus) => {\r\n        setTurnCount(gameStatus.turnElapsed);\r\n        if (defeatedPlayerIndex !== null) {\r\n          setDefeatedPlayerIndex(null);\r\n        }\r\n      },\r\n      (error) => {\r\n        setModalType(\"error\");\r\n        setModalChildren(error);\r\n        setIsModalOpen(true);\r\n      }\r\n    );\r\n\r\n    // 끝말잇기 실패\r\n    receiveSayWordFail((word) => {\r\n      setIsWordFail(true);\r\n      setInitialCharacter(word);\r\n\r\n      const id = setTimeout(() => {\r\n        setInitialCharacter((prevInitialCharacter) => prevInitialCharacter[0]);\r\n        setIsWordFail(false);\r\n      }, 1000);\r\n\r\n      setTimeoutIds([id]);\r\n    });\r\n\r\n    // 끝말잇기 성공\r\n    receiveSayWordSucceed((data) => {\r\n      const { word, userIndex, scoreDelta } = data;\r\n\r\n      // 다음 끝말잇기 글자 설정\r\n      const lastCharacter = word[word.length - 1];\r\n      const inputWordCharacters = word.split(\"\").slice(1);\r\n      const delay = 500; // 0.5초\r\n\r\n      inputWordCharacters.forEach((char, idx) => {\r\n        const id1 = setTimeout(\r\n          () => {\r\n            setInitialCharacter((prev) => prev + char);\r\n          },\r\n          delay * (idx + 1)\r\n        );\r\n        timeoutIds.push(id1);\r\n      });\r\n\r\n      // 득점 저장\r\n      setCurrPoints(scoreDelta);\r\n      setPlayer((prev) => {\r\n        return {\r\n          ...prev,\r\n          score: prev.score + scoreDelta\r\n        };\r\n      });\r\n      setPlayerList((prevList) => {\r\n        const newList = [...prevList];\r\n        let _player = { ...newList[userIndex] };\r\n        _player.score += scoreDelta;\r\n        newList[userIndex] = _player;\r\n        return newList;\r\n      });\r\n\r\n      const id2 = setTimeout(\r\n        () => {\r\n          setInitialCharacter(lastCharacter);\r\n        },\r\n        delay * 1.5 * inputWordCharacters?.length\r\n      );\r\n\r\n      timeoutIds.push(id2);\r\n      setTimeoutIds(timeoutIds);\r\n\r\n      updateNextTurn();\r\n    });\r\n\r\n    onTurnEnd(() => {});\r\n\r\n    onRoundEnd((roundResult) => {\r\n      const { defeatedUserIndex, scoreDelta } = roundResult;\r\n      const defeatedUser = playerList[defeatedUserIndex];\r\n      const currentPlayerIndex = playerList.findIndex((player) => player.myTurn);\r\n\r\n      if (defeatedUser && defeatedUserIndex === currentPlayerIndex) {\r\n        setIsRoundEnd(true);\r\n        setDefeatedPlayerIndex(defeatedUserIndex);\r\n        setCurrPoints(scoreDelta);\r\n        setPlayerList((prevList) => {\r\n          const newList = [...prevList];\r\n          let _player = { ...newList[defeatedUserIndex] };\r\n          _player.score = Math.max(0, _player.score + scoreDelta);\r\n          newList[defeatedUserIndex] = _player;\r\n          return newList;\r\n        });\r\n        if (!isLastRoundRef.current) {\r\n          roundStart();\r\n        }\r\n      }\r\n    });\r\n\r\n    onGameEnd((ranking) => {\r\n      isLastRoundRef.current = true;\r\n      setModalType(\"result\");\r\n      setModalChildren(ranking);\r\n      setIsModalOpen(true);\r\n    });\r\n  }, [playerList]);\r\n\r\n  // Add Playing Players Info\r\n  useEffect(() => {\r\n    const fetchAllUsers = async () => {\r\n      const updatedPlayerList = await Promise.all(\r\n        playerList.map(async (user) => {\r\n          const response = await getPlayerInfoByUserId(user.id);\r\n          if (!response) {\r\n            console.error(`Cannot get user info by userId: ${user.id}`);\r\n          }\r\n          return { ...user, ...response };\r\n        })\r\n      );\r\n      return updatedPlayerList.filter(Boolean);\r\n    };\r\n\r\n    if (playerList && playerList?.length !== 0 && !isDataFetched) {\r\n      fetchAllUsers().then((updatedPlayerList) => {\r\n        setPlayerList(updatedPlayerList);\r\n        setIsDataFetched(true);\r\n      });\r\n    }\r\n  }, [playerList, isDataFetched]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      timeoutIds?.forEach((id) => clearTimeout(id));\r\n    };\r\n  }, [timeoutIds]);\r\n\r\n  // ====== 차례 넘기기 ======\r\n  const updateNextTurn = () => {\r\n    const currPlayerIndex = playerList.findIndex((player) => player.myTurn);\r\n    const nextPlayerIndex = (currPlayerIndex + 1) % playerList.length;\r\n\r\n    setPlayerList((prevPlayerList) =>\r\n      prevPlayerList.map((player, idx) => {\r\n        if (idx === currPlayerIndex) {\r\n          return { ...player, myTurn: false };\r\n        }\r\n        if (idx === nextPlayerIndex) {\r\n          return { ...player, myTurn: true };\r\n        }\r\n        return player;\r\n      })\r\n    );\r\n\r\n    setIsMyTurn(playerList[nextPlayerIndex].id === cookie.userId);\r\n\r\n    if (!isRoundEnd) {\r\n      turnStart();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BodyWrapper dir=\"col\">\r\n      {isModalOpen && (\r\n        <GameModal\r\n          type={modalType}\r\n          isOpen={isModalOpen}\r\n          setIsOpen={setIsModalOpen}\r\n          setIsPlaying={setIsPlaying}\r\n        >\r\n          {modalChildren}\r\n        </GameModal>\r\n      )}\r\n      <UpperWrapper dir=\"col\" type=\"play\">\r\n        <TitleBar type=\"room\" info={roomInfo} />\r\n        <WordInput roundCount={roomInfo?.maxRound} roundTime={roomInfo?.roundTimeLimit} />\r\n        <PlayingPlayerList defeatedPlayerIndex={defeatedPlayerIndex} />\r\n      </UpperWrapper>\r\n      <Wrapper>\r\n        <Chat size=\"big\" />\r\n      </Wrapper>\r\n    </BodyWrapper>\r\n  );\r\n};\r\n\r\nPlayingContainer.propTypes = {\r\n  roomInfo: PropTypes.object,\r\n  setIsPlaying: PropTypes.func\r\n};\r\n\r\nexport default PlayingContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Cookies } from \"react-cookie\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\n\r\nimport { userInfoState } from \"@/recoil/userState\";\r\nimport { ContentWrapper, WideContent, Main, Box } from \"@/styles/CommonStyle\";\r\nimport GameHeader from \"@/components/Game/Shared/GameHeader\";\r\nimport { MainContentWrapper, Wrapper } from \"@/components/Game/Shared/Layout\";\r\nimport { Button } from \"@/components/Game/Shared/Button\";\r\nimport WaitingTab from \"@/components/Game/Waiting/WaitingTab\";\r\nimport PlayingTab from \"@/components/Game/Playing/PlayingTab\";\r\nimport WaitingContainer from \"@/components/Game/Waiting/WaitingContainer\";\r\nimport PlayingContainer from \"@/components/Game/Playing/PlayingContainer\";\r\nimport {\r\n  initSocket,\r\n  disconnectSocket,\r\n  loadRoom,\r\n  onLoadRoom,\r\n  onChangeRoomConfig,\r\n  onChangeRoomOwner,\r\n  onUserJoinRoom,\r\n  onUserLeaveRoom,\r\n  onSwitchReadyState,\r\n  onGameStart\r\n} from \"../../services/socket\";\r\nimport { waitingPlayerListState, playingPlayerListState } from \"@/recoil/userState\";\r\nimport { roomInfoState } from \"@/recoil/roomState\";\r\nimport Modal from \"../../components/Game/Shared/GameModal\";\r\nimport { getPlayerInfoByUserId } from \"@/services/user\";\r\nimport {\r\n  currentRoundState,\r\n  randomWordState,\r\n  initialCharacterState\r\n} from \"../../recoil/gameState\";\r\n\r\nconst GameRoom = () => {\r\n  const user = useRecoilValue(userInfoState);\r\n  const [roomInfo, setRoomInfo] = useRecoilState(roomInfoState);\r\n  const [waitingPlayerList, setWaitingPlayerList] =\r\n    useRecoilState(waitingPlayerListState);\r\n  const [playingPlayerList, setPlayingPlayerList] =\r\n    useRecoilState(playingPlayerListState);\r\n  const setCurrRound = useSetRecoilState(currentRoundState);\r\n  const setRandomWord = useSetRecoilState(randomWordState);\r\n  const setInitialCharacter = useSetRecoilState(initialCharacterState);\r\n\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isDataFetched, setIsDataFetched] = useState(false);\r\n\r\n  let newOwnerIndex = null;\r\n\r\n  // 경로의 roomId값 추출\r\n  const { roomId } = useParams();\r\n\r\n  // useEffect(() => {\r\n  //   setWaitingPlayerList(roomInfo?.userList);\r\n  //   setIsPlaying(roomInfo?.state === \"playing\" ? true : false);\r\n  // }, [roomInfo]);\r\n\r\n  // useEffect(() => {\r\n  //   initSocket((error) => {\r\n  //     setErrorMessage(error);\r\n  //     setIsModalOpen(true);\r\n  //   });\r\n\r\n  //   return () => disconnectSocket();\r\n  // }, []);\r\n  let isMounted = false;\r\n\r\n  useEffect(() => {\r\n    //   if (isMounted) return;\r\n    setWaitingPlayerList(roomInfo?.userList);\r\n    setIsPlaying(roomInfo?.state === \"playing\" ? true : false);\r\n\r\n    // 방 설정 변경\r\n    onChangeRoomConfig((newRoom) => {\r\n      setRoomInfo(newRoom);\r\n    });\r\n\r\n    // 타 플레이어 입장 알림\r\n    onUserJoinRoom((userId) => {\r\n      getUserInfoByUserId(userId);\r\n    });\r\n\r\n    // 타 플레이어 준비 여부 알림\r\n    onSwitchReadyState((data) => {\r\n      const { index, state } = data;\r\n      setWaitingPlayerList((prevList) => {\r\n        return prevList?.map((player, idx) =>\r\n          idx === index ? { ...player, isReady: state } : player\r\n        );\r\n      });\r\n    });\r\n\r\n    // 타 플레이어 퇴장 알림\r\n    onUserLeaveRoom((roomStatus) => {\r\n      const { userList, currentUserCount } = roomStatus;\r\n      setRoomInfo((prev) => ({ ...prev, currentUserCount }));\r\n      setIsDataFetched(false);\r\n      setWaitingPlayerList((prev) =>\r\n        prev.filter((user) => userList.some(({ userId }) => userId === user.userId))\r\n      );\r\n\r\n      if (newOwnerIndex !== null) {\r\n        setWaitingPlayerList((prev) => {\r\n          const updatedList = prev.map((user, idx) => {\r\n            return { ...user, isHost: idx === newOwnerIndex };\r\n          });\r\n          return updatedList;\r\n        });\r\n        newOwnerIndex = null;\r\n      }\r\n    });\r\n\r\n    // 방장 변경\r\n    onChangeRoomOwner((newOwnerIdx) => {\r\n      // setWaitingPlayerList((prev) => {\r\n      //   const updatedList = prev.map((user, idx) => {\r\n      //     return { ...user, isHost: idx === newOwnerIdx };\r\n      //   });\r\n      //   return updatedList;\r\n      // });\r\n      newOwnerIndex = newOwnerIdx;\r\n    });\r\n\r\n    // 게임 시작\r\n    onGameStart(\r\n      (room) => {\r\n        setCurrRound(room.currentRound);\r\n        setRandomWord(room.roundWord);\r\n        setIsPlaying(true);\r\n      },\r\n      (error) => {\r\n        setModalType(\"alert\");\r\n        setErrorMessage(error);\r\n        setIsModalOpen(true);\r\n      }\r\n    );\r\n\r\n    // 방 조회\r\n    // loadRoom((room) => {\r\n    //   setRoomInfo(room);\r\n    //   setIsPlaying(room.state === \"playing\" ? true : false);\r\n\r\n    //   // 방장\r\n    //   setWaitingPlayerList((prev) => [\r\n    //     { userId: room.roomOwnerUserId, isHost: true, isReady: true },\r\n    //     ...prev\r\n    //   ]);\r\n\r\n    //   // 방장이 아닌 플레이어\r\n    //   room.userList?.forEach((user) => {\r\n    //     setWaitingPlayerList((prev) => [...prev, user]);\r\n    //   });\r\n    // });\r\n\r\n    //   isMounted = true;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isPlaying) {\r\n      setIsDataFetched(false);\r\n      onLoadRoom(\r\n        (room) => {\r\n          setRoomInfo(room);\r\n          setWaitingPlayerList(room.userList);\r\n        },\r\n        (error) => {\r\n          setModalType(\"alert\");\r\n          setErrorMessage(error);\r\n          setIsModalOpen(true);\r\n        }\r\n      );\r\n    }\r\n  }, [isPlaying]);\r\n\r\n  // Add Waiting Players Info\r\n  useEffect(() => {\r\n    // if (waitingPlayerList && waitingPlayerList?.length !== 0 && !isDataFetched) {\r\n    if (waitingPlayerList && waitingPlayerList?.length !== 0 && !isDataFetched) {\r\n      const fetchAllUsers = async () => {\r\n        const updatedPlayerList = await Promise.all(\r\n          waitingPlayerList.map(async (user, idx) => {\r\n            const response = await getPlayerInfoByUserId(user.userId);\r\n            const isHost = roomInfo.roomOwnerUserId === user.userId;\r\n            // const isHost = idx === 0;\r\n            return { ...user, isHost, ...response };\r\n          })\r\n        );\r\n        setWaitingPlayerList(updatedPlayerList);\r\n        setIsDataFetched(true);\r\n      };\r\n      fetchAllUsers();\r\n    }\r\n  }, [waitingPlayerList]);\r\n\r\n  // // Add Playing Players Info\r\n  // useEffect(() => {\r\n  //   const fetchAllUsers = async () => {\r\n  //     const updatedPlayerList = await Promise.all(\r\n  //       playingPlayerList.map(async (user) => {\r\n  //         const response = await getWaitingPlayerInfoByUserId(user.id);\r\n  //         if (!response) {\r\n  //           console.error(`Cannot get user info by userId: ${user.id}`);\r\n  //         }\r\n  //         return { ...user, ...response };\r\n  //       })\r\n  //     );\r\n  //     return updatedPlayerList.filter(Boolean);\r\n  //   };\r\n\r\n  //   if (playingPlayerList && playingPlayerList?.length !== 0 && !isDataFetched2) {\r\n  //     fetchAllUsers().then((updatedPlayerList) => {\r\n  //       setPlayingPlayerList(updatedPlayerList);\r\n  //       setIsDataFetched2(true);\r\n  //     });\r\n  //   }\r\n  // }, [playingPlayerList]);\r\n\r\n  const getUserInfoByUserId = async (userId) => {\r\n    const userInfo = await getPlayerInfoByUserId(userId);\r\n    return setWaitingPlayerList((prev) => {\r\n      if (prev.some((user) => user.userId === userId)) return prev;\r\n      return [...prev, { userId, isHost: false, isReady: false, ...userInfo }];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ContentWrapper row=\"center\" col=\"center\">\r\n      {isModalOpen && (\r\n        <Modal\r\n          type={modalType}\r\n          isOpen={isModalOpen}\r\n          setIsOpen={setIsModalOpen}\r\n          setIsDataFetched={setIsDataFetched}\r\n          height=\"14.5rem\"\r\n        >\r\n          {errorMessage}\r\n        </Modal>\r\n      )}\r\n      <WideContent dir=\"col\">\r\n        <GameHeader />\r\n        <Main>\r\n          <Box bgColor={isPlaying && \"#000\"}>\r\n            <MainContentWrapper dir=\"col\">\r\n              <Wrapper row=\"between\" col=\"end\">\r\n                {isPlaying ? (\r\n                  <PlayingTab />\r\n                ) : (\r\n                  <WaitingTab\r\n                    isHost={\r\n                      waitingPlayerList?.find((_user) => _user.userId === user?.userId)\r\n                        ?.isHost\r\n                    }\r\n                    roomId={roomInfo?.id}\r\n                    setIsPlaying={setIsPlaying}\r\n                  />\r\n                )}\r\n                <div>\r\n                  <Button type=\"help\" />\r\n                  <Button type=\"setting\" />\r\n                  <Button type=\"exit\" location={isPlaying ? \"playing\" : \"waiting\"} />\r\n                </div>\r\n              </Wrapper>\r\n              {isPlaying ? (\r\n                <PlayingContainer roomInfo={roomInfo} setIsPlaying={setIsPlaying} />\r\n              ) : (\r\n                <WaitingContainer roomInfo={roomInfo} />\r\n              )}\r\n            </MainContentWrapper>\r\n          </Box>\r\n        </Main>\r\n      </WideContent>\r\n    </ContentWrapper>\r\n  );\r\n};\r\n\r\nexport default GameRoom;\r\n","import styled, { keyframes } from \"styled-components\";\r\nimport { FlexBox } from \"./FlexStyle\";\r\n\r\nexport const fadeIn = keyframes`\r\n  from { opacity: 0;}\r\n  to {opacity: 1;}\r\n`;\r\n\r\nexport const blink = keyframes`\r\n  50% {\r\n      opacity: 0;\r\n  }\r\n`;\r\n\r\n// 숨겨진 요소\r\nexport const Hidden = styled.div`\r\n  display: none;\r\n`;\r\n\r\n// 웹 페이지 그라데이션 영역\r\nexport const Gradation = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 42.25rem;\r\n  background-image: linear-gradient(#dbe1ed, #ffffff00);\r\n  z-index: -1;\r\n`;\r\n\r\n// 콘텐츠 영역 감싸는 태그\r\nexport const ContentWrapper = styled(FlexBox)`\r\n  animation: ${fadeIn} 0.5s ease-in-out;\r\n`;\r\n\r\n// 넓은 콘텐츠 영역 (width: 1200px)\r\nexport const WideContent = styled(FlexBox)`\r\n  width: ${(props) => props.width || \"75rem\"};\r\n  height: 100vh;\r\n`;\r\n\r\n// 좁은 콘텐츠 영역 (width: 652px)\r\nexport const NarrowContent = styled(FlexBox)`\r\n  width: 36.75rem; // 기존 40.75rem\r\n  height: ${(props) => props.height || \"fit-content\"};\r\n`;\r\n\r\n// 페이지의 핵심 콘텐츠\r\nexport const Main = styled.main`\r\n  width: 100%;\r\n  margin-top: ${({ type }) =>\r\n    type === \"big\" ? \"10rem\" : type !== \"admin\" ? \"7.5rem\" : \"6.5rem\"};\r\n`;\r\n\r\nexport const Box = styled(FlexBox)`\r\n  width: 100%;\r\n  max-width: 100%;\r\n  height: 43.25rem;\r\n  padding: 10px;\r\n  background-color: ${({ bgColor, theme }) => bgColor || theme.colors.content};\r\n`;\r\n\r\n// 작은 요소들을 감싸는 요소\r\nexport const SmallWrapper = styled(FlexBox)`\r\n  flex-basis: ${(props) => props.width || auto};\r\n  align-self: ${(props) => props.align || auto};\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nconst GridBox = styled.div`\r\n  display: grid;\r\n  grid-template-columns: ${({ cols, items, size }) =>\r\n    cols\r\n      ? setGridTemplateColumns(cols)\r\n      : items\r\n        ? setGridTemplateRepeatColumns(items, size)\r\n        : \"1fr\"};\r\n  grid-template-rows: ${({ rows }) => setGridTemplateRows(rows)};\r\n  grid-gap: ${({ gap }) => setGridGap(gap)};\r\n  grid-auto-flow: ${({ flow }) => setGridAutoFlow(flow)};\r\n  margin: ${({ margin }) => margin || \"0\"};\r\n  padding: ${({ padding }) => padding || \"0\"};\r\n  justify-content: ${({ row }) => setJustifyContent(row)};\r\n  align-items: ${({ col }) => setAlignItems(col)};\r\n`;\r\n\r\nconst setGridTemplateColumns = (cols) => {\r\n  return cols;\r\n};\r\n\r\nconst setGridTemplateRepeatColumns = (items, size = \"1fr\") => {\r\n  return `repeat(${items}, ${size})`;\r\n};\r\n\r\nconst setGridTemplateRows = (rows) => {\r\n  return rows || \"auto\";\r\n};\r\n\r\nconst setGridGap = (gap) => {\r\n  return gap || \"0\";\r\n};\r\n\r\nconst setGridAutoFlow = (flow) => {\r\n  switch (flow) {\r\n    case \"col\":\r\n      return \"column\";\r\n    default:\r\n      return \"row\";\r\n  }\r\n};\r\n\r\nconst setJustifyContent = (row) => {\r\n  switch (row) {\r\n    case \"center\":\r\n      return \"center\";\r\n    case \"start\":\r\n      return \"flex-start\";\r\n    case \"end\":\r\n      return \"flex-end\";\r\n    case \"between\":\r\n      return \"space-between\";\r\n    case \"around\":\r\n      return \"space-around\";\r\n    case \"evenly\":\r\n      return \"space-evenly\";\r\n    default:\r\n      return \"flex-start\";\r\n  }\r\n};\r\n\r\nconst setAlignItems = (col) => {\r\n  switch (col) {\r\n    case \"center\":\r\n      return \"center\";\r\n    case \"start\":\r\n      return \"flex-start\";\r\n    case \"end\":\r\n      return \"flex-end\";\r\n    case \"baseline\":\r\n      return \"baseline\";\r\n    case \"stretch\":\r\n      return \"stretch\";\r\n    default:\r\n      return \"stretch\";\r\n  }\r\n};\r\n\r\nexport default GridBox;\r\n"],"names":["StyledSmallButton","styled","button","type","getColors","bgColor","hoverBgColor","StyledButtonIcon","FontAwesomeIcon","color","fontSize","StyledMiniButton","layout","getIcon","faCircleQuestion","faGear","faX","Button","location","isModalOpen","setIsModalOpen","useState","_jsxs","_Fragment","children","_jsx","onClick","icon","Modal","isOpen","setIsOpen","height","getMessage","propTypes","PropTypes","ChatItem","nickname","message","createdAt","ChatContent","NickName","row","col","Message","marginLeft","FlexBox","GameHeader","FixedHeader","Link","LogoImg","src","attrs","as","img","SideContentWrapper","MainContentWrapper","Box","div","overflowY","Main","main","position","top","bottom","left","right","maxWidth","width","margin","padding","borderTop","borderRight","borderBottom","borderLeft","borderRadius","zIndex","Wrapper","SpacingWrapper","spacingY","spacingX","BodyWrapper","UpperWrapper","Span","span","font","fontWeight","StyledLink","TAB_TYPES","CREATE","ENTER","LIST","RANKING","PLAYING","READY","WAIT","TAB_BG_COLORS","TAB_TEXT_COLORS","TAB_TEXTS","StyledTab","TabIcon","TabSpan","theme","s","MainTab","Tab","rooms","setRoomInfo","useSetRecoilState","roomInfoState","setUser","userInfoState","setCookie","useCookies","navigate","useNavigate","onCreateRoom","useCallback","onTryEnterRoom","availableRooms","filter","room","state","isSecure","currentUserCount","maxUserCount","length","pickedRoom","Math","floor","random","joinRoom","roomId","id","password","loadRoom","userList","userId","path","prev","roomNumber","toString","error","onUserJoinRoom","console","log","getOnClick","hasOnClick","faTrophy","Object","values","WaitingTab","isHost","setIsPlaying","modalType","setModalType","modalMessage","setModalMessage","isReady","setIsReady","setRoomId","roomIdState","waitingPlayerList","setWaitingPlayerList","useRecoilState","waitingPlayerListState","onStartGame","gameStart","onUpdateRoomConfig","onReadyToggle","switchReadyState","data","index","prevList","map","player","idx","TabWrapper","PlayingTab","PlayerWrapper","StatusBox","border","StatusText","WaitingPlayerList","playerList","useRecoilValue","cookies","setUserId","GridBox","items","gap","onPlayerClick","faStar","style","Player","avatarUrl","level","dir","setType","randomWordState","atom","key","default","initialCharacterState","currentRoundState","turnCountState","isMyTurnState","thisTurnLeftTimeState","thisRoundLeftTimeState","isWordFailState","selector","get","_ref","playingPlayerListState","findIndex","myTurn","currentPointsState","balloonMessageState","Chat","isPlaying","size","toMessage","setToMessage","setBalloonMessage","chats","setChats","chatResult","useRef","chatInput","useEffect","receiveMessage","async","current","scrollHeight","scrollTop","clientHeight","getNicknameByUserId","prevChat","handleMessage","e","preventDefault","sendMessage","focus","getPlayerInfoByUserId","ChatWrapper","ChatHeader","ChatIcon","faComment","ChatItemWrapper","ref","chat","i","ChatInputWrapper","ChatInput","value","onChange","target","onKeyDown","ChatSubmitButton","xxxxs","input","WaitingContainer","roomInfo","TitleBar","info","Profile","TimerBar","totalTime","totalTurnTime","setTotalTurnTime","thisTurnLeftTime","setThisTurnLeftTime","thisRoundLeftTime","setThisRoundLeftTime","setWidth","secRef","onTimer","personalTimeLimit","personalTimeLeft","roundTimeLeft","leftTime","round","getBgColor","name","outerColor","React","innerColor","ProgressBarWrapper","ProgressBar","TimeLeftText","WordInput","roundCount","roundTime","randomWord","initialCharacter","isMyTurn","isFail","currRound","setCurrRound","inputWord","setInputWord","setPlayerList","setPlayer","playingPlayerState","syncPlayerList","syncPlayingPlayerToListState","p","WordInputWrapper","FirstWordWrapper","split","char","FirstWordSpan","WordTimerInfo","DisplayWordWrapper","DisplayFailWord","DisplayWord","InputWrapper","Input","placeholder","startsWith","colors","blink","TurnScore","pointType","setPointType","currPoints","setCurrPoints","disappered","setTimeout","updatedPlayer","score","updatedPlayerList","clearTimeout","StyledSpan","TotalScore","StyledScoreText","PlayingPlayerList","defeatedPlayerIndex","balloonMessage","isDefeated","setIsDefeated","isBalloonShown","setIsBalloonShown","defeatedPlayers","timer","fill","flow","defeated","StyledBalloon","String","padStart","fadeOut","keyframes","PlayingContainer","setRandomWord","setInitialCharacter","setIsMyTurn","setTurnCount","setIsWordFail","isDataFetched","setIsDataFetched","isRoundEnd","setIsRoundEnd","setDefeatedPlayerIndex","timeoutIds","setTimeoutIds","modalChildren","setModalChildren","cookie","isLastRoundRef","roomOwnerUserId","roundStart","onRoundStart","gameStatus","currentRound","usersSequence","user","currentTurnUserIndex","roundWord","wordStartsWith","currentTurnUserId","maxRound","turnStart","onTurnStart","turnElapsed","receiveSayWordFail","word","prevInitialCharacter","receiveSayWordSucceed","userIndex","scoreDelta","lastCharacter","inputWordCharacters","slice","forEach","id1","push","newList","_player","id2","delay","updateNextTurn","onTurnEnd","onRoundEnd","roundResult","defeatedUserIndex","defeatedUser","currentPlayerIndex","max","onGameEnd","ranking","Promise","all","response","Boolean","fetchAllUsers","then","currPlayerIndex","nextPlayerIndex","prevPlayerList","GameModal","roundTimeLimit","GameRoom","playingPlayerList","setPlayingPlayerList","errorMessage","setErrorMessage","newOwnerIndex","useParams","onChangeRoomConfig","newRoom","getUserInfoByUserId","onSwitchReadyState","onUserLeaveRoom","roomStatus","some","updatedList","onChangeRoomOwner","newOwnerIdx","onGameStart","onLoadRoom","userInfo","ContentWrapper","WideContent","find","_user","fadeIn","Gradation","props","NarrowContent","content","auto","align","cols","setGridTemplateColumns","setGridTemplateRepeatColumns","rows","setGridTemplateRows","setGridGap","setGridAutoFlow","setJustifyContent","setAlignItems"],"sourceRoot":""}