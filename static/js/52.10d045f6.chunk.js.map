{"version":3,"file":"static/js/52.10d045f6.chunk.js","mappings":"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","sources":["pages/Web/Member/Redirection.jsx","hooks/useAxios.js","recoil/userState.js","services/user.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// ===== hooks import =====\r\nimport useAxios from \"@/hooks/useAxios\";\r\n\r\n// ===== recoil & module import =====\r\nimport { userInfoState } from \"@/recoil/userState\";\r\nimport { getCurrentUserInfo } from \"../../../services/user\";\r\n\r\n// ===== component =====\r\nconst Redirection = () => {\r\n  const code = new URL(window.location.href).searchParams.get(\"code\"); // 인가코드 가져오기\r\n\r\n  // === ref ===\r\n  const isDataFetched = useRef(false);\r\n\r\n  // === state ===\r\n  const setUser = useSetRecoilState(userInfoState);\r\n\r\n  // === 카카오 로그인 api ===\r\n  const [apiConfig, setApiConfig] = useState({\r\n    method: \"get\",\r\n    url: `/user/oauth/kakao?code=${code}`\r\n  });\r\n\r\n  const { response, error, loading, fetchData } = useAxios(apiConfig, false);\r\n\r\n  // === cookie ===\r\n  const [cookies, setCookie] = useCookies([\"sessionId\"]);\r\n\r\n  // === navigate ===\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [apiConfig]);\r\n\r\n  // === 카카오 로그인 api ===\r\n  useEffect(() => {\r\n    if (response !== null) {\r\n      const userRole = response.authorityLevel === 100 ? \"admin\" : \"member\";\r\n      const expires = new Date();\r\n      expires.setTime(expires.getTime() + 7200 * 1000);\r\n      setCookie(\"sessionId\", response.sessionId, { path: \"/\", expires });\r\n      setCookie(\"userRole\", userRole, { path: \"/\", expires });\r\n\r\n      if (!isDataFetched.current) getUserInfo();\r\n      navigate(\"/\");\r\n    } else if (error) {\r\n      navigate(`/member/login`);\r\n    }\r\n  }, [response, error]);\r\n\r\n  const getUserInfo = useCallback(async () => {\r\n    const userInfo = await getCurrentUserInfo();\r\n\r\n    if (userInfo !== null) {\r\n      setCookie(\"userId\", userInfo.nickname.split(\"#\")[1], { path: \"/\" });\r\n      const updatedUserInfo = {\r\n        role: cookies.userRole,\r\n        ...userInfo\r\n      };\r\n      setUser(updatedUserInfo);\r\n      isDataFetched.current = true;\r\n    }\r\n  }, []);\r\n\r\n  return <div>카카오 로그인 중...</div>;\r\n};\r\n\r\nexport default Redirection;\r\n","import { useRef, useEffect, useState, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"../services/const\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: BASE_URL\r\n  // withCredentials: true\r\n});\r\n\r\n// config = { method, url, headers, data }\r\nconst useAxios = (config, executeOnMount = true) => {\r\n  const isDataFetched = useRef(false);\r\n  const [response, setResponse] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    try {\r\n      const res = await instance.request(config);\r\n      setResponse(res.data);\r\n    } catch (error) {\r\n      setError(error.response?.data.error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [config]);\r\n\r\n  useEffect(() => {\r\n    if (isDataFetched.current) return;\r\n\r\n    if (executeOnMount) {\r\n      fetchData();\r\n      isDataFetched.current = true;\r\n    }\r\n  }, [executeOnMount]);\r\n\r\n  return { response, error, loading, fetchData };\r\n};\r\n\r\nexport default useAxios;\r\n","import { atom, selector, selectorFamily } from \"recoil\";\r\n\r\nexport const userInfoState = atom({\r\n  key: \"userInfoState\",\r\n  default: null // e.g., { username: \"username\", nickname: \"nickname\", role: \"admin\", level: 1, winRate: 0.0, exp: 0, avatarUrl: \"\" }\r\n});\r\n\r\n// userState -> avatarUrl만 추출\r\nexport const avatarUrlState = selector({\r\n  key: \"avatarUrlState\",\r\n  get: ({ get }) => {\r\n    const user = get(userInfoState);\r\n    return user?.avatarUrl;\r\n  }\r\n});\r\n\r\n// userState -> isActive(활성화 여부)만 추출\r\nexport const isActiveAccountState = atom({\r\n  key: \"isActiveAccountState\",\r\n  default: true\r\n});\r\n\r\n// read-only\r\n// export const isActiveAccountState = selector({\r\n//   key: \"isActiveAccountState\",\r\n//   get: ({ get }) => {\r\n//     const user = get(userInfoState);\r\n//     return user.isActive;\r\n//   }\r\n// });\r\n\r\n// 대기실 플레이어들의 상태 목록\r\nexport const waitingPlayerListState = atom({\r\n  key: \"waitingPlayerListState\",\r\n  default: []\r\n});\r\n\r\n// 대기실 플레이어의 상태\r\nexport const waitingPlayerState = atom({\r\n  key: \"waitingPlayerState\",\r\n  default: {\r\n    isReady: false,\r\n    isHost: true\r\n  }\r\n});\r\n\r\n// 인게임 플레이어들의 상태 목록\r\nexport const playingPlayerListState = atom({\r\n  key: \"playingPlayerListState\",\r\n  default: []\r\n});\r\n\r\n// 인게임 플레이어의 상태\r\nexport const playingPlayerState = atom({\r\n  key: \"playingPlayerState\",\r\n  default: {\r\n    myTurn: false,\r\n    score: 0\r\n  }\r\n\r\n  // get:\r\n  //   () =>\r\n  //   ({ get }) => {\r\n  //     const user = get(userInfoState);\r\n  //     return {\r\n  //       ...user,\r\n  //       myTurn: false,\r\n  //       roundScore: [],\r\n  //       totalScore: 0\r\n  //     };\r\n  //   },\r\n  // set:\r\n  //   () =>\r\n  //   ({ set }, newValue) => {\r\n  //     set(playingPlayerState(), newValue);\r\n  //   }\r\n});\r\n\r\n// 인게임 플레이어 -> 인게임 플레이어들 목록 동기화\r\nexport const syncPlayingPlayerToListState = selector({\r\n  key: \"syncPlayingPlayerToListState\",\r\n  get: ({ get }) => {\r\n    const playerList = get(playingPlayerListState);\r\n    const currPlayer = get(playingPlayerState);\r\n    return playerList.map((player) =>\r\n      player.id === currPlayer.id ? currPlayer : player\r\n    );\r\n  },\r\n  set: ({ set }, newValue) => {\r\n    set(playingPlayerListState, newValue);\r\n  }\r\n});\r\n","import axios from \"axios\";\r\nimport { Cookies } from \"react-cookie\";\r\nimport { BASE_URL } from \"./const\";\r\n\r\nconst cookies = new Cookies();\r\n\r\nexport const getCurrentUserInfo = async () => {\r\n  const userInfoRes = await axios.get(`${BASE_URL}/user/me`, {\r\n    headers: { sessionId: cookies.get(\"sessionId\") }\r\n  });\r\n\r\n  if (userInfoRes.statusText === \"OK\") {\r\n    return userInfoRes.data.result;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const updateCurrentUserAvatar = async (accIdx, nickname = \"테스트\") => {\r\n  const res = await axios.put(\r\n    `${BASE_URL}/user`,\r\n    { avatarAccessoryIndex: accIdx, nickname: nickname },\r\n    { headers: { sessionId: cookies.get(\"sessionId\") } }\r\n  );\r\n\r\n  if (res.statusText === \"OK\") {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const getPlayerInfoByUserId = async (userId) => {\r\n  const res = await axios.get(`${BASE_URL}/user/${userId}`, {\r\n    headers: { sessionId: cookies.get(\"sessionId\") }\r\n  });\r\n\r\n  if (res.statusText === \"OK\") {\r\n    return res.data.result;\r\n  }\r\n\r\n  return null;\r\n};\r\n"],"names":["Redirection","code","URL","window","location","href","searchParams","get","isDataFetched","useRef","setUser","useSetRecoilState","userInfoState","apiConfig","setApiConfig","useState","method","url","response","error","loading","fetchData","useAxios","cookies","setCookie","useCookies","navigate","useNavigate","useEffect","userRole","authorityLevel","expires","Date","setTime","getTime","sessionId","path","current","getUserInfo","useCallback","async","userInfo","getCurrentUserInfo","nickname","split","updatedUserInfo","role","_jsx","children","instance","axios","create","baseURL","BASE_URL","config","executeOnMount","arguments","length","undefined","setResponse","setError","setLoading","res","request","data","_error$response","atom","key","default","isActiveAccountState","selector","_ref","user","avatarUrl","waitingPlayerListState","playingPlayerListState","isReady","isHost","playingPlayerState","myTurn","score","syncPlayingPlayerToListState","_ref2","playerList","currPlayer","map","player","id","set","_ref3","newValue","Cookies","userInfoRes","concat","headers","statusText","result","updateCurrentUserAvatar","accIdx","put","avatarAccessoryIndex","getPlayerInfoByUserId","userId"],"sourceRoot":""}